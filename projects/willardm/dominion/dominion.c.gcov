        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:58
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
      784:    9:  if (*(int*)a > *(int*)b)
    #####:   10:  return 1;
      784:   11:  if (*(int*)a < *(int*)b)
      280:   12:  return -1;
      504:   13:  return 0;
      784:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:  int k8, int k9, int k10) {
    #####:   23:    int* k = malloc(10 * sizeof(int));
    #####:   24:    k[0] = k1;
    #####:   25:    k[1] = k2;
    #####:   26:    k[2] = k3;
    #####:   27:    k[3] = k4;
    #####:   28:    k[4] = k5;
    #####:   29:    k[5] = k6;
    #####:   30:    k[6] = k7;
    #####:   31:    k[7] = k8;
    #####:   32:    k[8] = k9;
    #####:   33:    k[9] = k10;
    #####:   34:    return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,struct gameState *state) {
        -:   38:
        -:   39:  int i;
        -:   40:  int j;
        -:   41:  int it;
        -:   42:  //set up random number generator
       28:   43:  SelectStream(1);
       28:   44:  PutSeed((long)randomSeed);
        -:   45:
        -:   46:  //check number of players
       56:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   48:  {
    #####:   49:    return -1;
        -:   50:  }
        -:   51:
        -:   52:  //set number of players
       28:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
      616:   56:  for (i = 0; i < 10; i++)
        -:   57:  {
     6160:   58:    for (j = 0; j < 10; j++)
        -:   59:    {
     5320:   60:      if (j != i && kingdomCards[j] == kingdomCards[i])
        -:   61:      {
    #####:   62:        return -1;
        -:   63:      }
     2800:   64:    }
      280:   65:  }
        -:   66:
        -:   67:  //initialize supply
        -:   68:  ///////////////////////////////
        -:   69:
        -:   70:  //set number of Curse cards
       28:   71:  if (numPlayers == 2)
        -:   72:  {
       28:   73:    state->supplyCount[curse] = 10;
       28:   74:  }
    #####:   75:  else if (numPlayers == 3)
        -:   76:  {
    #####:   77:    state->supplyCount[curse] = 20;
    #####:   78:  }
        -:   79:  else
        -:   80:  {
    #####:   81:    state->supplyCount[curse] = 30;
        -:   82:  }
        -:   83:
        -:   84:  //set number of Victory cards
       28:   85:  if (numPlayers == 2)
        -:   86:  {
       28:   87:    state->supplyCount[estate] = 8;
       28:   88:    state->supplyCount[duchy] = 8;
       28:   89:    state->supplyCount[province] = 8;
       28:   90:  }
        -:   91:  else
        -:   92:  {
    #####:   93:    state->supplyCount[estate] = 12;
    #####:   94:    state->supplyCount[duchy] = 12;
    #####:   95:    state->supplyCount[province] = 12;
        -:   96:  }
        -:   97:
        -:   98:  //set number of Treasure cards
       28:   99:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       28:  100:  state->supplyCount[silver] = 40;
       28:  101:  state->supplyCount[gold] = 30;
        -:  102:
        -:  103:  //set number of Kingdom cards
     1176:  104:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
        -:  105:  {
     9240:  106:    for (j = 0; j < 10; j++)           		//loop chosen cards
        -:  107:    {
     4340:  108:      if (kingdomCards[j] == i)
        -:  109:      {
        -:  110:        //check if card is a 'Victory' Kingdom card
      560:  111:        if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
        -:  112:        {
    #####:  113:          if (numPlayers == 2){
    #####:  114:            state->supplyCount[i] = 8;
    #####:  115:          }
    #####:  116:          else{ state->supplyCount[i] = 12; }
    #####:  117:        }
        -:  118:        else
        -:  119:        {
      280:  120:          state->supplyCount[i] = 10;
        -:  121:        }
      280:  122:        break;
        -:  123:      }
        -:  124:      else    //card is not in the set choosen for the game
        -:  125:      {
     4060:  126:        state->supplyCount[i] = -1;
        -:  127:      }
     4060:  128:    }
        -:  129:
      560:  130:  }
        -:  131:
        -:  132:  ////////////////////////
        -:  133:  //supply intilization complete
        -:  134:
        -:  135:  //set player decks
      168:  136:  for (i = 0; i < numPlayers; i++)
        -:  137:  {
       56:  138:    state->deckCount[i] = 0;
      448:  139:    for (j = 0; j < 3; j++)
        -:  140:    {
      168:  141:      state->deck[i][j] = estate;
      168:  142:      state->deckCount[i]++;
      168:  143:    }
      896:  144:    for (j = 3; j < 10; j++)
        -:  145:    {
      392:  146:      state->deck[i][j] = copper;
      392:  147:      state->deckCount[i]++;
      392:  148:    }
       56:  149:  }
        -:  150:
        -:  151:  //shuffle player decks
      168:  152:  for (i = 0; i < numPlayers; i++)
        -:  153:  {
       56:  154:    if ( shuffle(i, state) < 0 )
        -:  155:    {
    #####:  156:      return -1;
        -:  157:    }
       56:  158:  }
        -:  159:
        -:  160:  //draw player hands
      168:  161:  for (i = 0; i < numPlayers; i++)
        -:  162:  {
        -:  163:    //initialize hand size to zero
       56:  164:    state->handCount[i] = 0;
       56:  165:    state->discardCount[i] = 0;
        -:  166:    //draw 5 cards
        -:  167:    // for (j = 0; j < 5; j++)
        -:  168:    //	{
        -:  169:    //	  drawCard(i, state);
        -:  170:    //	}
       56:  171:  }
        -:  172:
        -:  173:  //set embargo tokens to 0 for all supply piles
     1568:  174:  for (i = 0; i <= treasure_map; i++)
        -:  175:  {
      756:  176:    state->embargoTokens[i] = 0;
      756:  177:  }
        -:  178:
        -:  179:  //initialize first player's turn
       28:  180:  state->outpostPlayed = 0;
       28:  181:  state->phase = 0;
       28:  182:  state->numActions = 1;
       28:  183:  state->numBuys = 1;
       28:  184:  state->playedCardCount = 0;
       28:  185:  state->whoseTurn = 0;
       28:  186:  state->handCount[state->whoseTurn] = 0;
        -:  187:  //int it; move to top
        -:  188:
        -:  189:  //Moved draw cards to here, only drawing at the start of a turn
      336:  190:  for (it = 0; it < 5; it++){
      140:  191:    drawCard(state->whoseTurn, state);
      140:  192:  }
        -:  193:
       28:  194:  updateCoins(state->whoseTurn, state, 0);
        -:  195:
       28:  196:  return 0;
       28:  197:}
        -:  198:
        -:  199:int shuffle(int player, struct gameState *state) {
        -:  200:
        -:  201:
        -:  202:  int newDeck[MAX_DECK];
       56:  203:  int newDeckPos = 0;
        -:  204:  int card;
        -:  205:  int i;
        -:  206:
       56:  207:  if (state->deckCount[player] < 1)
    #####:  208:  return -1;
       56:  209:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  210:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  211:
     1232:  212:  while (state->deckCount[player] > 0) {
      560:  213:    card = floor(Random() * state->deckCount[player]);
      560:  214:    newDeck[newDeckPos] = state->deck[player][card];
      560:  215:    newDeckPos++;
     3920:  216:    for (i = card; i < state->deckCount[player]-1; i++) {
     1400:  217:      state->deck[player][i] = state->deck[player][i+1];
     1400:  218:    }
      560:  219:    state->deckCount[player]--;
        -:  220:  }
     1232:  221:  for (i = 0; i < newDeckPos; i++) {
      560:  222:    state->deck[player][i] = newDeck[i];
      560:  223:    state->deckCount[player]++;
      560:  224:  }
        -:  225:
       56:  226:  return 0;
       56:  227:}
        -:  228:
        -:  229:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  230:{
        -:  231:  int card;
    #####:  232:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  233:
        -:  234:  //check if it is the right phase
    #####:  235:  if (state->phase != 0)
        -:  236:  {
    #####:  237:    return -1;
        -:  238:  }
        -:  239:
        -:  240:  //check if player has enough actions
    #####:  241:  if ( state->numActions < 1 )
        -:  242:  {
    #####:  243:    return -1;
        -:  244:  }
        -:  245:
        -:  246:  //get card played
    #####:  247:  card = handCard(handPos, state);
        -:  248:
        -:  249:  //check if selected card is an action
    #####:  250:  if ( card < adventurer || card > treasure_map )
        -:  251:  {
    #####:  252:    return -1;
        -:  253:  }
        -:  254:
        -:  255:  //play card
    #####:  256:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  257:  {
    #####:  258:    return -1;
        -:  259:  }
        -:  260:
        -:  261:  //reduce number of actions
    #####:  262:  state->numActions--;
        -:  263:
        -:  264:  //update coins (Treasure cards may be added with card draws)
    #####:  265:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  266:
    #####:  267:  return 0;
    #####:  268:}
        -:  269:
        -:  270:int buyCard(int supplyPos, struct gameState *state) {
        -:  271:  int who;
        -:  272:  if (DEBUG){
        -:  273:    printf("Entering buyCard...\n");
        -:  274:  }
        -:  275:
        -:  276:  // I don't know what to do about the phase thing.
        -:  277:
       21:  278:  who = state->whoseTurn;
        -:  279:
       21:  280:  if (state->numBuys < 1){
        -:  281:    if (DEBUG)
        -:  282:    printf("You do not have any buys left\n");
        7:  283:    return -1;
       14:  284:  } else if (supplyCount(supplyPos, state) <1){
        -:  285:    if (DEBUG)
        -:  286:    printf("There are not any of that type of card left\n");
       14:  287:    return -1;
    #####:  288:  } else if (state->coins < getCost(supplyPos)){
        -:  289:    if (DEBUG)
        -:  290:    printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  291:    return -1;
        -:  292:  } else {
    #####:  293:    state->phase=1;
        -:  294:    //state->supplyCount[supplyPos]--;
    #####:  295:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  296:
    #####:  297:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  298:    state->numBuys--;
        -:  299:    if (DEBUG)
        -:  300:    printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  301:  }
        -:  302:
        -:  303:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  304:  //state->discardCount[who]++;
        -:  305:
    #####:  306:  return 0;
       21:  307:}
        -:  308:
        -:  309:int numHandCards(struct gameState *state) {
    #####:  310:  return state->handCount[ whoseTurn(state) ];
        -:  311:}
        -:  312:
        -:  313:int handCard(int handPos, struct gameState *state) {
    #####:  314:  int currentPlayer = whoseTurn(state);
    #####:  315:  return state->hand[currentPlayer][handPos];
        -:  316:}
        -:  317:
        -:  318:int supplyCount(int card, struct gameState *state) {
       28:  319:  return state->supplyCount[card];
        -:  320:}
        -:  321:
        -:  322:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  323:  int i;
    #####:  324:  int count = 0;
        -:  325:
    #####:  326:  for (i = 0; i < state->deckCount[player]; i++)
        -:  327:  {
    #####:  328:    if (state->deck[player][i] == card) count++;
    #####:  329:  }
        -:  330:
    #####:  331:  for (i = 0; i < state->handCount[player]; i++)
        -:  332:  {
    #####:  333:    if (state->hand[player][i] == card) count++;
    #####:  334:  }
        -:  335:
    #####:  336:  for (i = 0; i < state->discardCount[player]; i++)
        -:  337:  {
    #####:  338:    if (state->discard[player][i] == card) count++;
    #####:  339:  }
        -:  340:
    #####:  341:  return count;
        -:  342:}
        -:  343:
        -:  344:int whoseTurn(struct gameState *state) {
       56:  345:  return state->whoseTurn;
        -:  346:}
        -:  347:
        -:  348:int endTurn(struct gameState *state) {
        -:  349:  int k;
        -:  350:  int i;
    #####:  351:  int currentPlayer = whoseTurn(state);
        -:  352:
        -:  353:  //Discard hand
    #####:  354:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  355:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  356:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  357:  }
    #####:  358:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  359:
        -:  360:  //Code for determining the player
    #####:  361:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  362:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  363:  }
        -:  364:  else{
    #####:  365:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  366:  }
        -:  367:
    #####:  368:  state->outpostPlayed = 0;
    #####:  369:  state->phase = 0;
    #####:  370:  state->numActions = 1;
    #####:  371:  state->coins = 0;
    #####:  372:  state->numBuys = 1;
    #####:  373:  state->playedCardCount = 0;
    #####:  374:  state->handCount[state->whoseTurn] = 0;
        -:  375:
        -:  376:  //int k; move to top
        -:  377:  //Next player draws hand
    #####:  378:  for (k = 0; k < 5; k++){
    #####:  379:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  380:  }
        -:  381:
        -:  382:  //Update money
    #####:  383:  updateCoins(state->whoseTurn, state , 0);
        -:  384:
    #####:  385:  return 0;
        -:  386:}
        -:  387:
        -:  388:int isGameOver(struct gameState *state) {
        -:  389:  int i;
        -:  390:  int j;
        -:  391:
        -:  392:  //if stack of Province cards is empty, the game ends
       28:  393:  if (state->supplyCount[province] == 0)
        -:  394:  {
        7:  395:    return 1;
        -:  396:  }
        -:  397:
        -:  398:  //if three supply pile are at 0, the game ends
       21:  399:  j = 0;
     1092:  400:  for (i = 0; i < 25; i++)
        -:  401:  {
      525:  402:    if (state->supplyCount[i] == 0)
        -:  403:    {
      483:  404:      j++;
      483:  405:    }
      525:  406:  }
       21:  407:  if ( j >= 3)
        -:  408:  {
       21:  409:    return 1;
        -:  410:  }
        -:  411:
    #####:  412:  return 0;
       28:  413:}
        -:  414:
        -:  415:int scoreFor (int player, struct gameState *state) {
        -:  416:
        -:  417:  int i;
    #####:  418:  int score = 0;
        -:  419:  //score from hand
    #####:  420:  for (i = 0; i < state->handCount[player]; i++)
        -:  421:  {
    #####:  422:    if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  423:    if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  424:    if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  425:    if (state->hand[player][i] == province) { score = score + 6; };
    #####:  426:    if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  427:    if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  428:  }
        -:  429:
        -:  430:  //score from discard
    #####:  431:  for (i = 0; i < state->discardCount[player]; i++)
        -:  432:  {
    #####:  433:    if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  434:    if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  435:    if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  436:    if (state->discard[player][i] == province) { score = score + 6; };
    #####:  437:    if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  438:    if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  439:  }
        -:  440:
        -:  441:  //score from deck
    #####:  442:  for (i = 0; i < state->discardCount[player]; i++)
        -:  443:  {
    #####:  444:    if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  445:    if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  446:    if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  447:    if (state->deck[player][i] == province) { score = score + 6; };
    #####:  448:    if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  449:    if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  450:  }
        -:  451:
    #####:  452:  return score;
        -:  453:}
        -:  454:
        -:  455:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  456:  int i;
        -:  457:  int j;
        -:  458:  int highScore;
        -:  459:  int currentPlayer;
        -:  460:
        -:  461:  //get score for each player
    #####:  462:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  463:  {
        -:  464:    //set unused player scores to -9999
    #####:  465:    if (i >= state->numPlayers)
        -:  466:    {
    #####:  467:      players[i] = -9999;
    #####:  468:    }
        -:  469:    else
        -:  470:    {
    #####:  471:      players[i] = scoreFor (i, state);
        -:  472:    }
    #####:  473:  }
        -:  474:
        -:  475:  //find highest score
    #####:  476:  j = 0;
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:  {
    #####:  479:    if (players[i] > players[j])
        -:  480:    {
    #####:  481:      j = i;
    #####:  482:    }
    #####:  483:  }
    #####:  484:  highScore = players[j];
        -:  485:
        -:  486:  //add 1 to players who had less turns
    #####:  487:  currentPlayer = whoseTurn(state);
    #####:  488:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  489:  {
    #####:  490:    if ( players[i] == highScore && i > currentPlayer )
        -:  491:    {
    #####:  492:      players[i]++;
    #####:  493:    }
    #####:  494:  }
        -:  495:
        -:  496:  //find new highest score
    #####:  497:  j = 0;
    #####:  498:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  499:  {
    #####:  500:    if ( players[i] > players[j] )
        -:  501:    {
    #####:  502:      j = i;
    #####:  503:    }
    #####:  504:  }
    #####:  505:  highScore = players[j];
        -:  506:
        -:  507:  //set winners in array to 1 and rest to 0
    #####:  508:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  509:  {
    #####:  510:    if ( players[i] == highScore )
        -:  511:    {
    #####:  512:      players[i] = 1;
    #####:  513:    }
        -:  514:    else
        -:  515:    {
    #####:  516:      players[i] = 0;
        -:  517:    }
    #####:  518:  }
        -:  519:
    #####:  520:  return 0;
        -:  521:}
        -:  522:
        -:  523:int drawCard(int player, struct gameState *state) {
        -:  524:  int count;
        -:  525:  int deckCounter;
      189:  526:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  527:
        -:  528:    //Step 1 Shuffle the discard pile back into a deck
        -:  529:    int i;
        -:  530:    //Move discard to deck
    #####:  531:    for (i = 0; i < state->discardCount[player];i++){
    #####:  532:      state->deck[player][i] = state->discard[player][i];
    #####:  533:      state->discard[player][i] = -1;
    #####:  534:    }
        -:  535:
    #####:  536:    state->deckCount[player] = state->discardCount[player];
    #####:  537:    state->discardCount[player] = 0;//Reset discard
        -:  538:
        -:  539:    //Shufffle the deck
    #####:  540:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  541:
        -:  542:    if (DEBUG){//Debug statements
        -:  543:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  544:    }
        -:  545:
    #####:  546:    state->discardCount[player] = 0;
        -:  547:
        -:  548:    //Step 2 Draw Card
    #####:  549:    count = state->handCount[player];//Get current player's hand count
        -:  550:
        -:  551:    if (DEBUG){//Debug statements
        -:  552:      printf("Current hand count: %d\n", count);
        -:  553:    }
        -:  554:
    #####:  555:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  556:
    #####:  557:    if (deckCounter == 0)
    #####:  558:    return -1;
        -:  559:
    #####:  560:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  561:    state->deckCount[player]--;
    #####:  562:    state->handCount[player]++;//Increment hand count
    #####:  563:  }
        -:  564:
        -:  565:  else{
      189:  566:    int count = state->handCount[player];//Get current hand count for player
        -:  567:    int deckCounter;
        -:  568:    if (DEBUG){//Debug statements
        -:  569:      printf("Current hand count: %d\n", count);
        -:  570:    }
        -:  571:
      189:  572:    deckCounter = state->deckCount[player];//Create holder for the deck count
      189:  573:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      189:  574:    state->deckCount[player]--;
      189:  575:    state->handCount[player]++;//Increment hand count
        -:  576:  }
        -:  577:
      189:  578:  return 0;
      189:  579:}
        -:  580:
        -:  581:int getCost(int cardNumber) {
      189:  582:  switch( cardNumber )
        -:  583:  {
        -:  584:    case curse:
        7:  585:    return 0;
        -:  586:    case estate:
        7:  587:    return 2;
        -:  588:    case duchy:
        7:  589:    return 5;
        -:  590:    case province:
        7:  591:    return 8;
        -:  592:    case copper:
        7:  593:    return 0;
        -:  594:    case silver:
        7:  595:    return 3;
        -:  596:    case gold:
        7:  597:    return 6;
        -:  598:    case adventurer:
        7:  599:    return 6;
        -:  600:    case council_room:
        7:  601:    return 5;
        -:  602:    case feast:
        7:  603:    return 4;
        -:  604:    case gardens:
        7:  605:    return 4;
        -:  606:    case mine:
        7:  607:    return 5;
        -:  608:    case remodel:
        7:  609:    return 4;
        -:  610:    case smithy:
        7:  611:    return 4;
        -:  612:    case village:
        7:  613:    return 3;
        -:  614:    case baron:
        7:  615:    return 4;
        -:  616:    case great_hall:
        7:  617:    return 3;
        -:  618:    case minion:
        7:  619:    return 5;
        -:  620:    case steward:
        7:  621:    return 3;
        -:  622:    case tribute:
        7:  623:    return 5;
        -:  624:    case ambassador:
        7:  625:    return 3;
        -:  626:    case cutpurse:
        7:  627:    return 4;
        -:  628:    case embargo:
        7:  629:    return 2;
        -:  630:    case outpost:
        7:  631:    return 5;
        -:  632:    case salvager:
        7:  633:    return 4;
        -:  634:    case sea_hag:
        7:  635:    return 4;
        -:  636:    case treasure_map:
        7:  637:    return 4;
        -:  638:  }
        -:  639:
    #####:  640:  return -1;
      189:  641:}
        -:  642:
        -:  643:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  644:  int i;
        -:  645:  int j;
        -:  646:  int k;
        -:  647:  int x;
        -:  648:  int index;
       28:  649:  int currentPlayer = whoseTurn(state);
       28:  650:  int nextPlayer = currentPlayer + 1;
        -:  651:
       28:  652:  int tributeRevealedCards[2] = {-1, -1};
        -:  653:  int temphand[MAX_HAND];// moved above the if statement
       28:  654:  int drawntreasure=0;
        -:  655:  int cardDrawn;
       28:  656:  int z = 0;// this is the counter for the temp hand
       28:  657:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  658:    nextPlayer = 0;
    #####:  659:  }
        -:  660:
        -:  661:  //uses switch to select card and perform actions
       28:  662:  switch( card ) {
        -:  663:    case adventurer:
        7:  664:      playAdventurer(state);
        7:  665:      return 0;
        -:  666:
        -:  667:    case council_room:
        -:  668:      //+4 Cards
    #####:  669:      return playCouncil_Room(state, handPos);
        -:  670:
        -:  671:    case feast:
        7:  672:      return playFeast(state, choice1);
        -:  673:
        -:  674:
        -:  675:
        -:  676:    return 0;
        -:  677:
        -:  678:    case gardens:
    #####:  679:    return -1;
        -:  680:
        -:  681:    case mine:
    #####:  682:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  683:
    #####:  684:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
        -:  685:    {
    #####:  686:      return -1;
        -:  687:    }
        -:  688:
    #####:  689:    if (choice2 > treasure_map || choice2 < curse)
        -:  690:    {
    #####:  691:      return -1;
        -:  692:    }
        -:  693:
    #####:  694:    if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
        -:  695:    {
    #####:  696:      return -1;
        -:  697:    }
        -:  698:
    #####:  699:    gainCard(choice2, state, 2, currentPlayer);
        -:  700:
        -:  701:    //discard card from hand
    #####:  702:    discardCard(handPos, currentPlayer, state, 0);
        -:  703:
        -:  704:    //discard trashed card
    #####:  705:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  706:    {
    #####:  707:      if (state->hand[currentPlayer][i] == j)
        -:  708:      {
    #####:  709:        discardCard(i, currentPlayer, state, 0);
    #####:  710:        break;
        -:  711:      }
    #####:  712:    }
        -:  713:
    #####:  714:    return 0;
        -:  715:
        -:  716:    case remodel:
    #####:  717:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  718:
    #####:  719:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
        -:  720:    {
    #####:  721:      return -1;
        -:  722:    }
        -:  723:
    #####:  724:    gainCard(choice2, state, 0, currentPlayer);
        -:  725:
        -:  726:    //discard card from hand
    #####:  727:    discardCard(handPos, currentPlayer, state, 0);
        -:  728:
        -:  729:    //discard trashed card
    #####:  730:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  731:    {
    #####:  732:      if (state->hand[currentPlayer][i] == j)
        -:  733:      {
    #####:  734:        discardCard(i, currentPlayer, state, 0);
    #####:  735:        break;
        -:  736:      }
    #####:  737:    }
        -:  738:
        -:  739:
    #####:  740:    return 0;
        -:  741:
        -:  742:    case smithy:
        -:  743:      //+3 Cards
        7:  744:      return playSmithy(state, handPos);
        -:  745:
        -:  746:    case village:
        7:  747:      return playVillage(state, handPos);
        -:  748:
        -:  749:    case baron:
    #####:  750:    state->numBuys++;//Increase buys by 1!
    #####:  751:    if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  752:      int p = 0;//Iterator for hand!
    #####:  753:      int card_not_discarded = 1;//Flag for discard set!
    #####:  754:      while(card_not_discarded){
    #####:  755:        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  756:          state->coins += 4;//Add 4 coins to the amount of coins
    #####:  757:          state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  758:          state->discardCount[currentPlayer]++;
    #####:  759:          for (;p < state->handCount[currentPlayer]; p++){
    #####:  760:            state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  761:          }
    #####:  762:          state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  763:          state->handCount[currentPlayer]--;
    #####:  764:          card_not_discarded = 0;//Exit the loop
    #####:  765:        }
    #####:  766:        else if (p > state->handCount[currentPlayer]){
        -:  767:          if(DEBUG) {
        -:  768:            printf("No estate cards in your hand, invalid choice\n");
        -:  769:            printf("Must gain an estate if there are any\n");
        -:  770:          }
    #####:  771:          if (supplyCount(estate, state) > 0){
    #####:  772:            gainCard(estate, state, 0, currentPlayer);
    #####:  773:            state->supplyCount[estate]--;//Decrement estates
    #####:  774:            if (supplyCount(estate, state) == 0){
    #####:  775:              isGameOver(state);
    #####:  776:            }
    #####:  777:          }
    #####:  778:          card_not_discarded = 0;//Exit the loop
    #####:  779:        }
        -:  780:
        -:  781:        else{
    #####:  782:          p++;//Next card
        -:  783:        }
        -:  784:      }
    #####:  785:    }
        -:  786:
        -:  787:    else{
    #####:  788:      if (supplyCount(estate, state) > 0){
    #####:  789:        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  790:        state->supplyCount[estate]--;//Decrement Estates
    #####:  791:        if (supplyCount(estate, state) == 0){
    #####:  792:          isGameOver(state);
    #####:  793:        }
    #####:  794:      }
        -:  795:    }
        -:  796:
        -:  797:
    #####:  798:    return 0;
        -:  799:
        -:  800:    case great_hall:
        -:  801:    //+1 Card
    #####:  802:    drawCard(currentPlayer, state);
        -:  803:
        -:  804:    //+1 Actions
    #####:  805:    state->numActions++;
        -:  806:
        -:  807:    //discard card from hand
    #####:  808:    discardCard(handPos, currentPlayer, state, 0);
    #####:  809:    return 0;
        -:  810:
        -:  811:    case minion:
        -:  812:    //+1 action
    #####:  813:    state->numActions++;
        -:  814:
        -:  815:    //discard card from hand
    #####:  816:    discardCard(handPos, currentPlayer, state, 0);
        -:  817:
    #####:  818:    if (choice1)		//+2 coins
        -:  819:    {
    #####:  820:      state->coins = state->coins + 2;
    #####:  821:    }
        -:  822:
    #####:  823:    else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  824:    {
        -:  825:      //discard hand
    #####:  826:      while(numHandCards(state) > 0)
        -:  827:      {
    #####:  828:        discardCard(handPos, currentPlayer, state, 0);
        -:  829:      }
        -:  830:
        -:  831:      //draw 4
    #####:  832:      for (i = 0; i < 4; i++)
        -:  833:      {
    #####:  834:        drawCard(currentPlayer, state);
    #####:  835:      }
        -:  836:
        -:  837:      //other players discard hand and redraw if hand size > 4
    #####:  838:      for (i = 0; i < state->numPlayers; i++)
        -:  839:      {
    #####:  840:        if (i != currentPlayer)
        -:  841:        {
    #####:  842:          if ( state->handCount[i] > 4 )
        -:  843:          {
        -:  844:            //discard hand
    #####:  845:            while( state->handCount[i] > 0 )
        -:  846:            {
    #####:  847:              discardCard(handPos, i, state, 0);
        -:  848:            }
        -:  849:
        -:  850:            //draw 4
    #####:  851:            for (j = 0; j < 4; j++)
        -:  852:            {
    #####:  853:              drawCard(i, state);
    #####:  854:            }
    #####:  855:          }
    #####:  856:        }
    #####:  857:      }
        -:  858:
    #####:  859:    }
    #####:  860:    return 0;
        -:  861:
        -:  862:    case steward:
    #####:  863:    if (choice1 == 1)
        -:  864:    {
        -:  865:      //+2 cards
    #####:  866:      drawCard(currentPlayer, state);
    #####:  867:      drawCard(currentPlayer, state);
    #####:  868:    }
    #####:  869:    else if (choice1 == 2)
        -:  870:    {
        -:  871:      //+2 coins
    #####:  872:      state->coins = state->coins + 2;
    #####:  873:    }
        -:  874:    else
        -:  875:    {
        -:  876:      //trash 2 cards in hand
    #####:  877:      discardCard(choice2, currentPlayer, state, 1);
    #####:  878:      discardCard(choice3, currentPlayer, state, 1);
        -:  879:    }
        -:  880:
        -:  881:    //discard card from hand
    #####:  882:    discardCard(handPos, currentPlayer, state, 0);
    #####:  883:    return 0;
        -:  884:
        -:  885:    case tribute:
    #####:  886:    if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  887:      if (state->deckCount[nextPlayer] > 0){
    #####:  888:        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  889:        state->deckCount[nextPlayer]--;
    #####:  890:      }
    #####:  891:      else if (state->discardCount[nextPlayer] > 0){
    #####:  892:        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  893:        state->discardCount[nextPlayer]--;
    #####:  894:      }
        -:  895:      else{
        -:  896:        //No Card to Reveal
        -:  897:        if (DEBUG){
        -:  898:          printf("No cards to reveal\n");
        -:  899:        }
        -:  900:      }
    #####:  901:    }
        -:  902:
        -:  903:    else{
    #####:  904:      if (state->deckCount[nextPlayer] == 0){
    #####:  905:        for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  906:          state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  907:          state->deckCount[nextPlayer]++;
    #####:  908:          state->discard[nextPlayer][i] = -1;
    #####:  909:          state->discardCount[nextPlayer]--;
    #####:  910:        }
        -:  911:
    #####:  912:        shuffle(nextPlayer,state);//Shuffle the deck
    #####:  913:      }
    #####:  914:      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  915:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  916:      state->deckCount[nextPlayer]--;
    #####:  917:      tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  918:      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  919:      state->deckCount[nextPlayer]--;
        -:  920:    }
        -:  921:
    #####:  922:    if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  923:      state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  924:      state->playedCardCount++;
    #####:  925:      tributeRevealedCards[1] = -1;
    #####:  926:    }
        -:  927:
    #####:  928:    for (i = 0; i <= 2; i ++){
    #####:  929:      if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  930:        state->coins += 2;
    #####:  931:      }
        -:  932:
    #####:  933:      else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
    #####:  934:        drawCard(currentPlayer, state);
    #####:  935:        drawCard(currentPlayer, state);
    #####:  936:      }
        -:  937:      else{//Action Card
    #####:  938:        state->numActions = state->numActions + 2;
        -:  939:      }
    #####:  940:    }
        -:  941:
    #####:  942:    return 0;
        -:  943:
        -:  944:    case ambassador:
    #####:  945:    j = 0;		//used to check if player has enough cards to discard
        -:  946:
    #####:  947:    if (choice2 > 2 || choice2 < 0)
        -:  948:    {
    #####:  949:      return -1;
        -:  950:    }
        -:  951:
    #####:  952:    if (choice1 == handPos)
        -:  953:    {
    #####:  954:      return -1;
        -:  955:    }
        -:  956:
    #####:  957:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  958:    {
    #####:  959:      if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
        -:  960:      {
    #####:  961:        j++;
    #####:  962:      }
    #####:  963:    }
    #####:  964:    if (j < choice2)
        -:  965:    {
    #####:  966:      return -1;
        -:  967:    }
        -:  968:
        -:  969:    if (DEBUG)
        -:  970:    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  971:
        -:  972:    //increase supply count for choosen card by amount being discarded
    #####:  973:    state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  974:
        -:  975:    //each other player gains a copy of revealed card
    #####:  976:    for (i = 0; i < state->numPlayers; i++)
        -:  977:    {
    #####:  978:      if (i != currentPlayer)
        -:  979:      {
    #####:  980:        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  981:      }
    #####:  982:    }
        -:  983:
        -:  984:    //discard played card from hand
    #####:  985:    discardCard(handPos, currentPlayer, state, 0);
        -:  986:
        -:  987:    //trash copies of cards returned to supply
    #####:  988:    for (j = 0; j < choice2; j++)
        -:  989:    {
    #####:  990:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -:  991:      {
    #####:  992:        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
        -:  993:        {
    #####:  994:          discardCard(i, currentPlayer, state, 1);
    #####:  995:          break;
        -:  996:        }
    #####:  997:      }
    #####:  998:    }
        -:  999:
    #####: 1000:    return 0;
        -: 1001:
        -: 1002:    case cutpurse:
        -: 1003:
    #####: 1004:    updateCoins(currentPlayer, state, 2);
    #####: 1005:    for (i = 0; i < state->numPlayers; i++)
        -: 1006:    {
    #####: 1007:      if (i != currentPlayer)
        -: 1008:      {
    #####: 1009:        for (j = 0; j < state->handCount[i]; j++)
        -: 1010:        {
    #####: 1011:          if (state->hand[i][j] == copper)
        -: 1012:          {
    #####: 1013:            discardCard(j, i, state, 0);
    #####: 1014:            break;
        -: 1015:          }
    #####: 1016:          if (j == state->handCount[i])
        -: 1017:          {
    #####: 1018:            for (k = 0; k < state->handCount[i]; k++)
        -: 1019:            {
        -: 1020:              if (DEBUG)
        -: 1021:              printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1022:            }
    #####: 1023:            break;
        -: 1024:          }
    #####: 1025:        }
        -: 1026:
    #####: 1027:      }
        -: 1028:
    #####: 1029:    }
        -: 1030:
        -: 1031:    //discard played card from hand
    #####: 1032:    discardCard(handPos, currentPlayer, state, 0);
        -: 1033:
    #####: 1034:    return 0;
        -: 1035:
        -: 1036:
        -: 1037:    case embargo:
        -: 1038:    //+2 Coins
    #####: 1039:    state->coins = state->coins + 2;
        -: 1040:
        -: 1041:    //see if selected pile is in play
    #####: 1042:    if ( state->supplyCount[choice1] == -1 )
        -: 1043:    {
    #####: 1044:      return -1;
        -: 1045:    }
        -: 1046:
        -: 1047:    //add embargo token to selected supply pile
    #####: 1048:    state->embargoTokens[choice1]++;
        -: 1049:
        -: 1050:    //trash card
    #####: 1051:    discardCard(handPos, currentPlayer, state, 1);
    #####: 1052:    return 0;
        -: 1053:
        -: 1054:    case outpost:
        -: 1055:    //set outpost flag
    #####: 1056:    state->outpostPlayed++;
        -: 1057:
        -: 1058:    //discard card
    #####: 1059:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1060:    return 0;
        -: 1061:
        -: 1062:    case salvager:
        -: 1063:    //+1 buy
    #####: 1064:    state->numBuys++;
        -: 1065:
    #####: 1066:    if (choice1)
        -: 1067:    {
        -: 1068:      //gain coins equal to trashed card
    #####: 1069:      state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1070:      //trash card
    #####: 1071:      discardCard(choice1, currentPlayer, state, 1);
    #####: 1072:    }
        -: 1073:
        -: 1074:    //discard card
    #####: 1075:    discardCard(handPos, currentPlayer, state, 0);
    #####: 1076:    return 0;
        -: 1077:
        -: 1078:    case sea_hag:
    #####: 1079:    for (i = 0; i < state->numPlayers; i++){
    #####: 1080:      if (i != currentPlayer){
    #####: 1081:        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1082:        state->discardCount[i]++;
    #####: 1083:        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1084:      }
    #####: 1085:    }
    #####: 1086:    return 0;
        -: 1087:
        -: 1088:    case treasure_map:
        -: 1089:    //search hand for another treasure_map
    #####: 1090:    index = -1;
    #####: 1091:    for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1092:    {
    #####: 1093:      if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1094:      {
    #####: 1095:        index = i;
    #####: 1096:        break;
        -: 1097:      }
    #####: 1098:    }
    #####: 1099:    if (index > -1)
        -: 1100:    {
        -: 1101:      //trash both treasure cards
    #####: 1102:      discardCard(handPos, currentPlayer, state, 1);
    #####: 1103:      discardCard(index, currentPlayer, state, 1);
        -: 1104:
        -: 1105:      //gain 4 Gold cards
    #####: 1106:      for (i = 0; i < 4; i++)
        -: 1107:      {
    #####: 1108:        gainCard(gold, state, 1, currentPlayer);
    #####: 1109:      }
        -: 1110:
        -: 1111:      //return success
    #####: 1112:      return 1;
        -: 1113:    }
        -: 1114:
        -: 1115:    //no second treasure_map found in hand
    #####: 1116:    return -1;
        -: 1117:  }
        -: 1118:
    #####: 1119:  return -1;
       28: 1120:}
        -: 1121:
        -: 1122:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1123:
        -: 1124:  //if card is not trashed, added to Played pile
        7: 1125:  if (trashFlag < 1)
        -: 1126:  {
        -: 1127:    //add card to played pile
        7: 1128:    state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
        7: 1129:    state->playedCardCount++;
        7: 1130:  }
        -: 1131:
        -: 1132:  //set played card to -1
        7: 1133:  state->hand[currentPlayer][handPos] = -1;
        -: 1134:
        -: 1135:  //remove card from player's hand
        7: 1136:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1137:  {
        -: 1138:    //reduce number of cards in hand
    #####: 1139:    state->handCount[currentPlayer]--;
    #####: 1140:  }
        7: 1141:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1142:  {
        -: 1143:    //reduce number of cards in hand
    #####: 1144:    state->handCount[currentPlayer]--;
    #####: 1145:  }
        -: 1146:  else
        -: 1147:  {
        -: 1148:    //replace discarded card with last card in hand
        7: 1149:    state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1150:    //set last card to -1
        7: 1151:    state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1152:    //reduce number of cards in hand
        7: 1153:    state->handCount[currentPlayer]--;
        -: 1154:  }
        -: 1155:
        7: 1156:  return 0;
        -: 1157:}
        -: 1158:
        -: 1159:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1160:{
        -: 1161:  //Note: supplyPos is enum of choosen card
        -: 1162:
        -: 1163:  //check if supply pile is empty (0) or card is not used in game (-1)
        7: 1164:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1165:  {
    #####: 1166:    return -1;
        -: 1167:  }
        -: 1168:
        -: 1169:  //added card for [whoseTurn] current player:
        -: 1170:  // toFlag = 0 : add to discard
        -: 1171:  // toFlag = 1 : add to deck
        -: 1172:  // toFlag = 2 : add to hand
        -: 1173:
        7: 1174:  if (toFlag == 1)
        -: 1175:  {
    #####: 1176:    state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1177:    state->deckCount[player]++;
    #####: 1178:  }
        7: 1179:  else if (toFlag == 2)
        -: 1180:  {
    #####: 1181:    state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1182:    state->handCount[player]++;
    #####: 1183:  }
        -: 1184:  else
        -: 1185:  {
        7: 1186:    state->discard[player][ state->discardCount[player] ] = supplyPos;
        7: 1187:    state->discardCount[player]++;
        -: 1188:  }
        -: 1189:
        -: 1190:  //decrease number in supply pile
        7: 1191:  state->supplyCount[supplyPos]--;
        -: 1192:
        7: 1193:  return 0;
        7: 1194:}
        -: 1195:
        -: 1196:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1197:  int i;
        -: 1198:  //reset coin count
       45: 1199:  state->coins = 0;
        -: 1200:
        -: 1201:  //add coins for each Treasure card in player's hand
      500: 1202:  for (i = 0; i < state->handCount[player]; i++) {
      205: 1203:    if (state->hand[player][i] == copper) {
      122: 1204:      state->coins += 1;
      122: 1205:    }
       83: 1206:    else if (state->hand[player][i] == silver) {
       10: 1207:      state->coins += 2;
       10: 1208:    }
       73: 1209:    else if (state->hand[player][i] == gold){
       10: 1210:      state->coins += 3;
       10: 1211:    }
      205: 1212:  }
        -: 1213:
        -: 1214:  //add bonus
       45: 1215:  state->coins += bonus;
        -: 1216:
       45: 1217:  return 0;
        -: 1218:}
        -: 1219:
        -: 1220://  ****************************************
        -: 1221://  *******  REFACTORED FUNCTIONS **********
        -: 1222://  ****************************************
        -: 1223:
        -: 1224:int playSmithy(struct gameState *state, int handPos) {
        7: 1225:  int currentPlayer = whoseTurn(state);
        -: 1226:  int i;
       56: 1227:  for (i = 0; i < 3; i++) {
       21: 1228:    drawCard(currentPlayer, state);
       21: 1229:  }
        -: 1230:  //discard card from hand
        -: 1231:  //  The Bug -> we don't discard
        -: 1232:  // discardCard(handPos, currentPlayer, state, 0);
        7: 1233:  return 0;
        -: 1234:}
        -: 1235:
        -: 1236:int playAdventurer(struct gameState *state) {
        7: 1237:  int currentPlayer = whoseTurn(state);
        -: 1238:  int temphand[MAX_HAND];// moved above the if statement
        7: 1239:  int drawntreasure = 0;
        -: 1240:  int cardDrawn;
        7: 1241:  int z = 0;// this is the counter for the temp hand
        -: 1242:
        -: 1243:  // The Bug -> we draw 3 cards instead of 2
        -: 1244:  // while(drawntreasure < 2){
       56: 1245:  while(drawntreasure < 3){
       21: 1246:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
    #####: 1247:      shuffle(currentPlayer, state);
    #####: 1248:    }
       21: 1249:    drawCard(currentPlayer, state);
       21: 1250:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       21: 1251:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       21: 1252:    drawntreasure++;
        -: 1253:    else{
    #####: 1254:      temphand[z]=cardDrawn;
    #####: 1255:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1256:      z++;
        -: 1257:    }
        -: 1258:  }
       14: 1259:  while(z - 1 >= 0){
    #####: 1260:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z -1 ]; // discard all cards in play that have been drawn
    #####: 1261:    z = z - 1;
        -: 1262:  }
        7: 1263:  return 0;
        -: 1264:}
        -: 1265:
        -: 1266:int playVillage(struct gameState *state, int handPos) {
        7: 1267:  int currentPlayer = whoseTurn(state);
        -: 1268:  //+1 Card
        7: 1269:  drawCard(currentPlayer, state);
        -: 1270:
        -: 1271:  //+2 Actions
        7: 1272:  state->numActions = state->numActions + 2;
        -: 1273:
        -: 1274:  //discard played card from hand
        7: 1275:  discardCard(handPos, currentPlayer, state, 0);
        7: 1276:  return 0;
        -: 1277:}
        -: 1278:
        -: 1279:int playFeast(struct gameState *state, int choice1) {
        -: 1280:  int i;
        -: 1281:  int x;
        7: 1282:  int currentPlayer = whoseTurn(state);
        -: 1283:  int temphand[MAX_HAND];// moved above the if statement
        -: 1284:
        -: 1285:  //gain card with cost up to 5
        -: 1286:  //Backup hand
       98: 1287:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
       42: 1288:    temphand[i] = state->hand[currentPlayer][i];//Backup card
       42: 1289:    state->hand[currentPlayer][i] = -1;//Set to nothing
       42: 1290:  }
        -: 1291:  //Backup hand
        -: 1292:
        -: 1293:  //Update Coins for Buy
        7: 1294:  updateCoins(currentPlayer, state, 5);
        7: 1295:  x = 1;//Condition to loop on
       28: 1296:  while( x == 1) {//Buy one card
        7: 1297:    if (supplyCount(choice1, state) <= 0){
        -: 1298:      if (DEBUG) {
        -: 1299:        printf("None of that card left, sorry!\n");
        -: 1300:      }
        -: 1301:      if (DEBUG){
        -: 1302:        printf("Cards Left: %d\n", supplyCount(choice1, state));
        -: 1303:      }
    #####: 1304:    }
        -: 1305:    //  The Bug -> Hid the statement which prevents a player from buying too expensive of a card.
        -: 1306:    // else if (state->coins < getCost(choice1)){
        -: 1307:    //   printf("That card is too expensive!\n");
        -: 1308:    //   if (DEBUG){
        -: 1309:    //     printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -: 1310:    //   }
        -: 1311:    // }
        -: 1312:    else{
        -: 1313:      if (DEBUG){
        -: 1314:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1315:      }
        7: 1316:      gainCard(choice1, state, 0, currentPlayer);//Gain the card
        7: 1317:      x = 0;//No more buying cards
        -: 1318:
        -: 1319:      if (DEBUG){
        -: 1320:        printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -: 1321:      }
        -: 1322:    }
        -: 1323:  }
        -: 1324:  //Reset Hand
       98: 1325:  for (i = 0; i <= state->handCount[currentPlayer]; i++){
       42: 1326:    state->hand[currentPlayer][i] = temphand[i];
       42: 1327:    temphand[i] = -1;
       42: 1328:  }
        -: 1329:  //Reset Hand
        7: 1330:}
        -: 1331:
        -: 1332:int playCouncil_Room(struct gameState *state, int handPos) {
    #####: 1333:  int currentPlayer = whoseTurn(state);
        -: 1334:  int i;
        -: 1335:  // +4 Cards
    #####: 1336:  for (i = 0; i < 4; i++) {
    #####: 1337:    drawCard(currentPlayer, state);
    #####: 1338:  }
        -: 1339:
        -: 1340:  //+1 Buy
    #####: 1341:  state->numBuys++;
        -: 1342:
        -: 1343:  //Each other player draws a card
        -: 1344:  // handCount[currentPlayer] -> numPlayers
    #####: 1345:  for (i = 0; i < state->numPlayers; i++) {
        -: 1346:    // The Bug -> remove the if control which prevents drawCard from being called if the currentPlayer is reached
        -: 1347:    // if ( i != currentPlayer) {
    #####: 1348:      drawCard(i, state);
        -: 1349:    // }
    #####: 1350:  }
        -: 1351:  //put played card in played card pile
    #####: 1352:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1353:  return 0;
        -: 1354:}
        -: 1355:
        -: 1356:
        -: 1357:    //end of dominion.c
