*****************************************
Exececuting CARDTEST4
*****************************************


starting cardtest4 -- testing VILLAGE function

----Starting Scenario 1 tests -----
---- in checkVillage Scenario 1 test loop
---- in checkVillage Scenario 1 player 0 test loop
Scenario1-test1: FAILED: player #0,  check if played card is increased by 1
G->playedCardCount: 2,  Gpre.playedCardCount: 0
Scenario1-test2: SUCCESS: player #0, check if total supply count is unchanged
Scenario1-test3: SUCCESS: player #0, check if hand count is unchanged (minus Village + 1 card)
Scenario1-test4: SUCCESS: player #0, check if deck count decreased by 1
Scenario1-test5: FAILED: player #0, check if numActions is now +2 * # players
G->numActions: 7, Gpre.numActions: 1
---- in checkVillage Scenario 1 player 1 test loop
Scenario1-test1: FAILED: player #1,  check if played card is increased by 1
G->playedCardCount: 2,  Gpre.playedCardCount: 0
Scenario1-test2: SUCCESS: player #1, check if total supply count is unchanged
Scenario1-test3: SUCCESS: player #1, check if hand count is unchanged (minus Village + 1 card)
Scenario1-test4: SUCCESS: player #1, check if deck count decreased by 1
Scenario1-test5: FAILED: player #1, check if numActions is now +2 * # players
G->numActions: 7, Gpre.numActions: 1
cardtest4-Scenario1-tests -> FAILED to pass tests # errors: -4
----Starting Scenario 2 tests -----
---- in checkVillage Scenario 2 test loop
---- in checkVillage Scenario 2 player 0 test loop
Scenario2-test1: FAILED: player #0, check if played card count unchanged
Scenario2-test2: SUCCESS: player #0, check to see if the total supply count has not changed
Scenario2-test3: SUCCESS: player #0, check if hand count has not changed
Scenario2-test4: FAILED: player #0, check if deck count has not changed
---- in checkVillage Scenario 2 player 1 test loop
Scenario2-test1: FAILED: player #1, check if played card count unchanged
Scenario2-test2: SUCCESS: player #1, check to see if the total supply count has not changed
Scenario2-test3: SUCCESS: player #1, check if hand count has not changed
Scenario2-test4: FAILED: player #1, check if deck count has not changed
cardtest4-Scenario2-tests -> FAILED to pass tests # errors: -4
----Starting Scenario 3 tests -----
---- in checkTreasureMap Scenario 3 test loop
---- in checkTreasureMap Scenario 3 player 0 test loop
Scenario3-test1: FAILED: player #0,  check if played card is increased by 1
Scenario3-test2: SUCCESS: player #0,  is unchanged
Scenario3-test3: FAILED: player #0, check if hand count went down 1
Scenario3-test4: FAILED: player #0, check if deck count decreased by 3
Scenario3-test5: FAILED: player #0, check if numActions is now +2 * # players
---- in checkTreasureMap Scenario 3 player 1 test loop
Scenario3-test1: FAILED: player #1,  check if played card is increased by 1
Scenario3-test2: SUCCESS: player #1,  is unchanged
Scenario3-test3: FAILED: player #1, check if hand count went down 1
Scenario3-test4: FAILED: player #1, check if deck count decreased by 3
Scenario3-test5: FAILED: player #1, check if numActions is now +2 * # players
cardtest4-Scenario3-tests -> FAILED to pass tests # errors: -8
*****************************************
Exececuting coverage stats for dominion.c
*****************************************
File 'dominion.c'
Lines executed:22.32% of 654
Branches executed:24.34% of 415
Taken at least once:15.18% of 415
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:5
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "dominion_refactorwk2.h"
        -:    4:#include "rngs.h"
        -:    5:#include <stdio.h>
        -:    6:#include <math.h>
        -:    7:#include <stdlib.h>
        -:    8:
function compare called 420 returned 100% blocks executed 85%
        -:    9:int compare(const void* a, const void* b) {
      420:   10:  if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:   11:    return 1;
      420:   12:  if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      150:   13:    return -1;
      270:   14:  return 0;
      420:   15:}
        -:   16:
function newGame called 0 returned 0% blocks executed 0%
        -:   17:struct gameState* newGame() {
    #####:   18:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   19:  return g;
        -:   20:}
        -:   21:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   22:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   23:		  int k8, int k9, int k10) {
    #####:   24:  int* k = malloc(10 * sizeof(int));
    #####:   25:  k[0] = k1;
    #####:   26:  k[1] = k2;
    #####:   27:  k[2] = k3;
    #####:   28:  k[3] = k4;
    #####:   29:  k[4] = k5;
    #####:   30:  k[5] = k6;
    #####:   31:  k[6] = k7;
    #####:   32:  k[7] = k8;
    #####:   33:  k[8] = k9;
    #####:   34:  k[9] = k10;
    #####:   35:  return k;
        -:   36:}
        -:   37:
function initializeGame called 15 returned 100% blocks executed 87%
        -:   38:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   39:		   struct gameState *state) {
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       15:   44:  SelectStream(1);
       15:   45:  PutSeed((long)randomSeed);
        -:   46:  
        -:   47:  //check number of players
       30:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       15:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      330:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:   58:    {
     3300:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:   60:        {
     2850:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
     1500:   65:        }
      150:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       15:   73:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   74:    {
       15:   75:      state->supplyCount[curse] = 10;
       15:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
    #####:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       15:   87:  if (numPlayers == 2)
branch  0 taken 100%
branch  1 taken 0%
        -:   88:    {
       15:   89:      state->supplyCount[estate] = 8;
       15:   90:      state->supplyCount[duchy] = 8;
       15:   91:      state->supplyCount[province] = 8;
       15:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       15:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       15:  102:  state->supplyCount[silver] = 40;
       15:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      630:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  107:  {
     4950:  108:	  for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  109:	  {
     2325:  110:		  if (kingdomCards[j] == i) {
branch  0 taken 6%
branch  1 taken 94%
        -:  111:			  //check if card is a 'Victory' Kingdom card
      300:  112:			  if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
       15:  113:				  if (numPlayers == 2){
branch  0 taken 100%
branch  1 taken 0%
       15:  114:					  state->supplyCount[i] = 8;
       15:  115:				  } else {
    #####:  116:					  state->supplyCount[i] = 12;
        -:  117:				  }
       15:  118:			  } else {
      135:  119:				  state->supplyCount[i] = 10;
        -:  120:			  }
      150:  121:			  break;
        -:  122:		  } else {    //card is not in the set choosen for the game
     2175:  123:			  state->supplyCount[i] = -1;
        -:  124:		  }
     2175:  125:	  }
      300:  126:  }
        -:  127:  ////////////////////////
        -:  128:  //supply intilization complete
        -:  129:
        -:  130:  //set player decks
       90:  131:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33%
       30:  132:      state->deckCount[i] = 0;
      240:  133:      for (j = 0; j < 3; j++) {
branch  0 taken 75%
branch  1 taken 25%
       90:  134:    	  state->deck[i][j] = estate;
       90:  135:    	  state->deckCount[i]++;
       90:  136:      }
      480:  137:      for (j = 3; j < 10; j++) {
branch  0 taken 88%
branch  1 taken 13%
      210:  138:    	  state->deck[i][j] = copper;
      210:  139:    	  state->deckCount[i]++;
      210:  140:      }
       30:  141:   }
        -:  142:
        -:  143:  //shuffle player decks
       90:  144:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33%
       30:  145:      if ( shuffle(i, state) < 0 ) {
branch  0 taken 0%
branch  1 taken 100%
    #####:  146:    	  return -1;
        -:  147:      }
       30:  148:   }
        -:  149:
        -:  150:  //draw player hands
       90:  151:  for (i = 0; i < numPlayers; i++) {
branch  0 taken 67%
branch  1 taken 33%
        -:  152:      //initialize hand size to zero
       30:  153:      state->handCount[i] = 0;
       30:  154:      state->discardCount[i] = 0;
        -:  155:      //draw 5 cards
        -:  156:      // for (j = 0; j < 5; j++)
        -:  157:      //	{
        -:  158:      //	  drawCard(i, state);
        -:  159:      //	}
       30:  160:   }
        -:  161:  
        -:  162:  //set embargo tokens to 0 for all supply piles
      840:  163:  for (i = 0; i <= treasure_map; i++) {
branch  0 taken 96%
branch  1 taken 4%
      405:  164:      state->embargoTokens[i] = 0;
      405:  165:  }
        -:  166:
        -:  167:  //initialize first player's turn
       15:  168:  state->outpostPlayed = 0;
       15:  169:  state->phase = 0;
       15:  170:  state->numActions = 1;
       15:  171:  state->numBuys = 1;
       15:  172:  state->playedCardCount = 0;
       15:  173:  state->whoseTurn = 0;
       15:  174:  state->handCount[state->whoseTurn] = 0;
        -:  175:  //int it; move to top
        -:  176:
        -:  177:  //Moved draw cards to here, only drawing at the start of a turn
      180:  178:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       75:  179:    drawCard(state->whoseTurn, state);
       75:  180:  }
        -:  181:
       15:  182:  updateCoins(state->whoseTurn, state, 0);
       15:  183:  return 0;
       15:  184:}
        -:  185:
        -:  186:
function shuffle called 30 returned 100% blocks executed 93%
        -:  187:int shuffle(int player, struct gameState *state) {
        -:  188:  int newDeck[MAX_DECK];
       30:  189:  int newDeckPos = 0;
        -:  190:  int card;
        -:  191:  int i;
        -:  192:
       30:  193:  if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  194:    return -1;
       30:  195:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
        -:  196:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  197:
      660:  198:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      300:  199:    card = floor(Random() * state->deckCount[player]);
      300:  200:    newDeck[newDeckPos] = state->deck[player][card];
      300:  201:    newDeckPos++;
     2010:  202:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30%
      705:  203:      state->deck[player][i] = state->deck[player][i+1];
      705:  204:    }
      300:  205:    state->deckCount[player]--;
        -:  206:  }
      660:  207:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      300:  208:    state->deck[player][i] = newDeck[i];
      300:  209:    state->deckCount[player]++;
      300:  210:  }
       30:  211:  return 0;
       30:  212:}
        -:  213:
        -:  214:
function playCard called 0 returned 0% blocks executed 0%
        -:  215:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  216:{	
        -:  217:  int card;
    #####:  218:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  219:
        -:  220:  //check if it is the right phase
    #####:  221:  if (state->phase != 0) {
branch  0 never executed
branch  1 never executed
    #####:  222:      return -1;
        -:  223:  }
        -:  224:	
        -:  225:  //check if player has enough actions
    #####:  226:  if ( state->numActions < 1 ) {
branch  0 never executed
branch  1 never executed
    #####:  227:      return -1;
        -:  228:  }
        -:  229:	
        -:  230:  //get card played
    #####:  231:  card = handCard(handPos, state);
        -:  232:	
        -:  233:  //check if selected card is an action
    #####:  234:  if ( card < adventurer || card > treasure_map ) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####:  235:      return -1;
        -:  236:  }
        -:  237:	
        -:  238:  //play card
    #####:  239:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 ) {
branch  0 never executed
branch  1 never executed
    #####:  240:      return -1;
        -:  241:  }
        -:  242:	
        -:  243:  //reduce number of actions
    #####:  244:  state->numActions--;
        -:  245:
        -:  246:  //update coins (Treasure cards may be added with card draws)
    #####:  247:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  248:	
    #####:  249:  return 0;
    #####:  250:}
        -:  251:
        -:  252:
function buyCard called 0 returned 0% blocks executed 0%
        -:  253:int buyCard(int supplyPos, struct gameState *state) {
        -:  254:  int who;
        -:  255:  if (DEBUG){ printf("Entering buyCard...\n"); }
        -:  256:
        -:  257:  // I don't know what to do about the phase thing.
        -:  258:
    #####:  259:  who = state->whoseTurn;
        -:  260:
    #####:  261:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  262:    if (DEBUG)
        -:  263:      printf("You do not have any buys left\n");
    #####:  264:    return -1;
    #####:  265:  } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  266:    if (DEBUG)
        -:  267:      printf("There are not any of that type of card left\n");
    #####:  268:    return -1;
    #####:  269:  } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  270:    if (DEBUG) 
        -:  271:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  272:    return -1;
        -:  273:  } else {
    #####:  274:    state->phase=1;
        -:  275:    //state->supplyCount[supplyPos]--;
    #####:  276:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  277:  
    #####:  278:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  279:    state->numBuys--;
        -:  280:    if (DEBUG)
        -:  281:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  282:  }
        -:  283:
        -:  284:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  285:  //state->discardCount[who]++;
        -:  286:    
    #####:  287:  return 0;
    #####:  288:}
        -:  289:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  290:int numHandCards(struct gameState *state) {
    #####:  291:  return state->handCount[ whoseTurn(state) ];
        -:  292:}
        -:  293:
function handCard called 0 returned 0% blocks executed 0%
        -:  294:int handCard(int handPos, struct gameState *state) {
    #####:  295:  int currentPlayer = whoseTurn(state);
    #####:  296:  return state->hand[currentPlayer][handPos];
        -:  297:}
        -:  298:
function supplyCount called 60 returned 100% blocks executed 100%
        -:  299:int supplyCount(int card, struct gameState *state) {
       60:  300:  return state->supplyCount[card];
        -:  301:}
        -:  302:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  303:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  304:  int i;
    #####:  305:  int count = 0;
        -:  306:
    #####:  307:  for (i = 0; i < state->deckCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  308:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  309:  }
        -:  310:
    #####:  311:  for (i = 0; i < state->handCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  312:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  313:  }
        -:  314:
    #####:  315:  for (i = 0; i < state->discardCount[player]; i++) {
branch  0 never executed
branch  1 never executed
    #####:  316:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  317:  }
    #####:  318:  return count;
        -:  319:}
        -:  320:
function whoseTurn called 30 returned 100% blocks executed 100%
        -:  321:int whoseTurn(struct gameState *state) {
       30:  322:  return state->whoseTurn;
        -:  323:}
        -:  324:
function endTurn called 0 returned 0% blocks executed 0%
        -:  325:int endTurn(struct gameState *state) {
        -:  326:  int k;
        -:  327:  int i;
    #####:  328:  int currentPlayer = whoseTurn(state);
        -:  329:  
        -:  330:  //Discard hand
    #####:  331:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  332:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  333:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  334:  }
    #####:  335:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  336:    
        -:  337:  //Code for determining the player
    #####:  338:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  339:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  340:  }
        -:  341:  else{
    #####:  342:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  343:  }
        -:  344:
    #####:  345:  state->outpostPlayed = 0;
    #####:  346:  state->phase = 0;
    #####:  347:  state->numActions = 1;
    #####:  348:  state->coins = 0;
    #####:  349:  state->numBuys = 1;
    #####:  350:  state->playedCardCount = 0;
    #####:  351:  state->handCount[state->whoseTurn] = 0;
        -:  352:
        -:  353:  //int k; move to top
        -:  354:  //Next player draws hand
    #####:  355:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  356:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  357:  }
        -:  358:
        -:  359:  //Update money
    #####:  360:  updateCoins(state->whoseTurn, state , 0);
        -:  361:
    #####:  362:  return 0;
        -:  363:}
        -:  364:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  365:int isGameOver(struct gameState *state) {
        -:  366:  int i;
        -:  367:  int j;
        -:  368:	
        -:  369:  //if stack of Province cards is empty, the game ends
    #####:  370:  if (state->supplyCount[province] == 0)
branch  0 never executed
branch  1 never executed
        -:  371:    {
    #####:  372:      return 1;
        -:  373:    }
        -:  374:
        -:  375:  //if three supply pile are at 0, the game ends
    #####:  376:  j = 0;
    #####:  377:  for (i = 0; i < 25; i++)
branch  0 never executed
branch  1 never executed
        -:  378:    {
    #####:  379:      if (state->supplyCount[i] == 0)
branch  0 never executed
branch  1 never executed
        -:  380:	{
    #####:  381:	  j++;
    #####:  382:	}
    #####:  383:    }
    #####:  384:  if ( j >= 3)
branch  0 never executed
branch  1 never executed
        -:  385:    {
    #####:  386:      return 1;
        -:  387:    }
        -:  388:
    #####:  389:  return 0;
    #####:  390:}
        -:  391:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  392:int scoreFor (int player, struct gameState *state) {
        -:  393:
        -:  394:  int i;
    #####:  395:  int score = 0;
        -:  396:  //score from hand
    #####:  397:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  398:    {
    #####:  399:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  400:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  401:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  402:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  403:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  404:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
        -:  405:      //DEBUG
        -:  406:      //printf ("score = %d\n", score);
    #####:  407:    }
        -:  408:
        -:  409:  //score from discard
    #####:  410:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  411:    {
    #####:  412:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  413:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  414:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  415:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  416:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  417:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
        -:  418:      //printf ("score = %d\n", score);
    #####:  419:    }
        -:  420:
        -:  421:  //score from deck
    #####:  422:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
        -:  430:      //printf ("score = %d\n", score);
    #####:  431:    }
        -:  432:
    #####:  433:  return score;
        -:  434:}
        -:  435:
function getWinners called 0 returned 0% blocks executed 0%
        -:  436:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  437:  int i;	
        -:  438:  int j;
        -:  439:  int highScore;
        -:  440:  int currentPlayer;
        -:  441:
        -:  442:  //get score for each player
    #####:  443:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  444:    {
        -:  445:      //set unused player scores to -9999
    #####:  446:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  447:	{
    #####:  448:	  players[i] = -9999;
    #####:  449:	}
        -:  450:      else
        -:  451:	{
    #####:  452:	  players[i] = scoreFor (i, state);
        -:  453:	}
    #####:  454:    }
        -:  455:
        -:  456:  //find highest score
    #####:  457:  j = 0;
    #####:  458:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  459:    {
    #####:  460:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  461:	{
    #####:  462:	  j = i;
    #####:  463:	}
    #####:  464:    }
    #####:  465:  highScore = players[j];
        -:  466:
        -:  467:  //add 1 to players who had less turns
    #####:  468:  currentPlayer = whoseTurn(state);
    #####:  469:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  470:    {
    #####:  471:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  472:	{
    #####:  473:	  players[i]++;
    #####:  474:	}
    #####:  475:    }
        -:  476:
        -:  477:  //find new highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
    #####:  484:	}
    #####:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //set winners in array to 1 and rest to 0
    #####:  489:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  490:    {
    #####:  491:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  492:	{
    #####:  493:	  players[i] = 1;
    #####:  494:	}
        -:  495:      else
        -:  496:	{
    #####:  497:	  players[i] = 0;
        -:  498:	}
    #####:  499:    }
        -:  500:
    #####:  501:  return 0;
        -:  502:}
        -:  503:
function drawCard called 105 returned 100% blocks executed 41%
        -:  504:int drawCard(int player, struct gameState *state) {
        -:  505:	int count;
        -:  506:	int deckCounter;
      105:  507:	if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  508:    
        -:  509:		//Step 1 Shuffle the discard pile back into a deck
        -:  510:		int i;
        -:  511:		//Move discard to deck
    #####:  512:		for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  513:			state->deck[player][i] = state->discard[player][i];
    #####:  514:			state->discard[player][i] = -1;
    #####:  515:		}
        -:  516:
    #####:  517:		state->deckCount[player] = state->discardCount[player];
    #####:  518:		state->discardCount[player] = 0;//Reset discard
        -:  519:
        -:  520:		//Shufffle the deck
    #####:  521:		shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  522:   
        -:  523:		if (DEBUG){//Debug statements
        -:  524:			printf("Deck count now: %d\n", state->deckCount[player]);
        -:  525:		}
        -:  526:    
    #####:  527:		state->discardCount[player] = 0;
        -:  528:
        -:  529:		//Step 2 Draw Card
    #####:  530:		count = state->handCount[player];//Get current player's hand count
        -:  531:
        -:  532:		if (DEBUG){//Debug statements
        -:  533:		  printf("Current hand count: %d\n", count);
        -:  534:		}
        -:  535:
    #####:  536:		deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  537:
    #####:  538:		if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  539:		  return -1;
        -:  540:
    #####:  541:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  542:		state->deckCount[player]--;
    #####:  543:		state->handCount[player]++;//Increment hand count
        -:  544:
    #####:  545:	} else{
      105:  546:		int count = state->handCount[player];//Get current hand count for player
        -:  547:		int deckCounter;
        -:  548:		if (DEBUG){//Debug statements
        -:  549:		  printf("Current hand count: %d\n", count);
        -:  550:		}
        -:  551:
      105:  552:		deckCounter = state->deckCount[player];//Create holder for the deck count
      105:  553:		state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      105:  554:		state->deckCount[player]--;
      105:  555:		state->handCount[player]++;//Increment hand count
        -:  556:	  }
      105:  557:  return 0;
      105:  558:}
        -:  559:
function getCost called 0 returned 0% blocks executed 0%
        -:  560:int getCost(int cardNumber)
        -:  561:{
    #####:  562:  switch( cardNumber ) 
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  563:    {
        -:  564:    case curse:
    #####:  565:      return 0;
        -:  566:    case estate:
    #####:  567:      return 2;
        -:  568:    case duchy:
    #####:  569:      return 5;
        -:  570:    case province:
    #####:  571:      return 8;
        -:  572:    case copper:
    #####:  573:      return 0;
        -:  574:    case silver:
    #####:  575:      return 3;
        -:  576:    case gold:
    #####:  577:      return 6;
        -:  578:    case adventurer:
    #####:  579:      return 6;
        -:  580:    case council_room:
    #####:  581:      return 5;
        -:  582:    case feast:
    #####:  583:      return 4;
        -:  584:    case gardens:
    #####:  585:      return 4;
        -:  586:    case mine:
    #####:  587:      return 5;
        -:  588:    case remodel:
    #####:  589:      return 4;
        -:  590:    case smithy:
    #####:  591:      return 4;
        -:  592:    case village:
    #####:  593:      return 3;
        -:  594:    case baron:
    #####:  595:      return 4;
        -:  596:    case great_hall:
    #####:  597:      return 3;
        -:  598:    case minion:
    #####:  599:      return 5;
        -:  600:    case steward:
    #####:  601:      return 3;
        -:  602:    case tribute:
    #####:  603:      return 5;
        -:  604:    case ambassador:
    #####:  605:      return 3;
        -:  606:    case cutpurse:
    #####:  607:      return 4;
        -:  608:    case embargo: 
    #####:  609:      return 2;
        -:  610:    case outpost:
    #####:  611:      return 5;
        -:  612:    case salvager:
    #####:  613:      return 4;
        -:  614:    case sea_hag:
    #####:  615:      return 4;
        -:  616:    case treasure_map:
    #####:  617:      return 4;
        -:  618:    }
        -:  619:	
    #####:  620:  return -1;
    #####:  621:}
        -:  622:
function cardEffect called 30 returned 100% blocks executed 3%
        -:  623:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  624:{
        -:  625:  int i;
        -:  626:  int j;
        -:  627:  int k;
        -:  628:  int x;
        -:  629:  int index;
       30:  630:  int currentPlayer = whoseTurn(state);
       30:  631:  int nextPlayer = currentPlayer + 1;
        -:  632:
       30:  633:  int tributeRevealedCards[2] = {-1, -1};
        -:  634:  int temphand[MAX_HAND];// moved above the if statement
        -:  635:  // int drawntreasure=0; removed due to code refactor wk2
        -:  636:  int cardDrawn;
       30:  637:  int z = 0;// this is the counter for the temp hand
       30:  638:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 50%
branch  1 taken 50%
       15:  639:    nextPlayer = 0;
       15:  640:  }
        -:  641:  
        -:  642:	
        -:  643:  //uses switch to select card and perform actions
       30:  644:  switch( card ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 100%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  645:    {
        -:  646:
        -:  647:    // ***************************		
        -:  648:		// ******** ADVENTURER *******
        -:  649:		// ***************************		
        -:  650:    case adventurer:
        -:  651:      
        -:  652:      // add refactored adventurer action here
    #####:  653:      AdventurerAction (currentPlayer, state, handPos);
    #####:  654:      return 0;
        -:  655:      
        -:  656:/*** Comment out original code before refactor      
        -:  657:      while(drawntreasure<2){
        -:  658:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  659:	  shuffle(currentPlayer, state);
        -:  660:	}
        -:  661:	drawCard(currentPlayer, state);
        -:  662:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  663:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  664:	  drawntreasure++;
        -:  665:	else{
        -:  666:	  temphand[z]=cardDrawn;
        -:  667:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  668:	  z++;
        -:  669:	}
        -:  670:      }
        -:  671:      while(z-1>=0){
        -:  672:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  673:	z=z-1;
        -:  674:      }
        -:  675:***/
        -:  676:
        -:  677:
        -:  678:    // *****************************
        -:  679:		// ******** Council Room *******
        -:  680:		// *****************************
        -:  681:			
        -:  682:    case council_room:
    #####:  683:		  CouncilRoomAction (currentPlayer, state, handPos);
    #####:  684:	    return 0;
        -:  685:	
        -:  686:/*** commented out to refactor in separate function
        -:  687:      //+4 Cards
        -:  688:      for (i = 0; i < 4; i++)
        -:  689:	{
        -:  690:	  drawCard(currentPlayer, state);
        -:  691:	}
        -:  692:			
        -:  693:      //+1 Buy
        -:  694:      state->numBuys++;
        -:  695:			
        -:  696:      //Each other player draws a card
        -:  697:      for (i = 0; i < state->numPlayers; i++)
        -:  698:	{
        -:  699:	  if ( i != currentPlayer )
        -:  700:	    {
        -:  701:	      drawCard(i, state);
        -:  702:	    }
        -:  703:	}
        -:  704:			
        -:  705:      //put played card in played card pile
        -:  706:      discardCard(handPos, currentPlayer, state, 0);
        -:  707:***/			
        -:  708:  			
        -:  709:    // ***************************		
        -:  710:	// ******** FEAST  **********
        -:  711:	// ***************************
        -:  712:    case feast:
        -:  713:    	//gain card with cost up to 5
        -:  714:    	//Backup hand
    #####:  715:    	for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  716:    		temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  717:    		state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  718:    	}
        -:  719:    	//Backup hand
        -:  720:
        -:  721:    	//Update Coins for Buy
    #####:  722:    	updateCoins(currentPlayer, state, 5);
    #####:  723:    	x = 1;//Condition to loop on
    #####:  724:    	while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  725:			if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  726:			  if (DEBUG)
        -:  727:				printf("None of that card left, sorry!\n");
        -:  728:
        -:  729:			  if (DEBUG){
        -:  730:				printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  731:			  }
    #####:  732:			}
    #####:  733:			else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  734:			  printf("That card is too expensive!\n");
        -:  735:
        -:  736:			  if (DEBUG){
        -:  737:				printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  738:			  }
    #####:  739:			}
        -:  740:			else{
        -:  741:
        -:  742:			  if (DEBUG){
        -:  743:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  744:			  }
        -:  745:
    #####:  746:			  gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  747:			  x = 0;//No more buying cards
        -:  748:
        -:  749:			  if (DEBUG){
        -:  750:				printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  751:			  }
        -:  752:
        -:  753:			}
        -:  754:    	}
        -:  755:
        -:  756:    	//Reset Hand
    #####:  757:		for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  758:			state->hand[currentPlayer][i] = temphand[i];
    #####:  759:			temphand[i] = -1;
    #####:  760:		}
        -:  761:		//Reset Hand
    #####:  762:		return 0;
        -:  763:			
        -:  764:    case gardens:
    #####:  765:      return -1;
        -:  766:			
        -:  767:    // ***************************		
        -:  768:		// ******** mine **********
        -:  769:		// ***************************		
        -:  770:    case mine:
    #####:  771:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  772:
    #####:  773:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  774:	{
    #####:  775:	  return -1;
        -:  776:	}
        -:  777:		
    #####:  778:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  779:	{
    #####:  780:	  return -1;
        -:  781:	}
        -:  782:
    #####:  783:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  784:	{
    #####:  785:	  return -1;
        -:  786:	}
        -:  787:
    #####:  788:      gainCard(choice2, state, 2, currentPlayer);
        -:  789:
        -:  790:      //discard card from hand
    #####:  791:      discardCard(handPos, currentPlayer, state, 0);
        -:  792:
        -:  793:      //discard trashed card
    #####:  794:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  795:	{
    #####:  796:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  797:	    {
    #####:  798:	      discardCard(i, currentPlayer, state, 0);			
    #####:  799:	      break;
        -:  800:	    }
    #####:  801:	}
        -:  802:			
    #####:  803:      return 0;
        -:  804:			
        -:  805:    // ***************************		
        -:  806:		// ******** remodel **********
        -:  807:		// ***************************		
        -:  808:    case remodel:
    #####:  809:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  810:
    #####:  811:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  812:	{
    #####:  813:	  return -1;
        -:  814:	}
        -:  815:
    #####:  816:      gainCard(choice2, state, 0, currentPlayer);
        -:  817:
        -:  818:      //discard card from hand
    #####:  819:      discardCard(handPos, currentPlayer, state, 0);
        -:  820:
        -:  821:      //discard trashed card
    #####:  822:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  823:	{
    #####:  824:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  825:	    {
    #####:  826:	      discardCard(i, currentPlayer, state, 0);			
    #####:  827:	      break;
        -:  828:	    }
    #####:  829:	}
        -:  830:
        -:  831:
    #####:  832:      return 0;
        -:  833:		
        -:  834:    // ***************************		
        -:  835:		// ******** SMITHY **********
        -:  836:		// ***************************		
        -:  837:    case smithy:
        -:  838:    
        -:  839:      // debug: print number of cards before call    
        -:  840:      //printf ("\nDebug: number cards in hand before: ");
        -:  841:      //printf ("%i\n", state->handCount[currentPlayer]);
        -:  842:      
        -:  843:      // add refactored smithy action here
    #####:  844:      SmithyAction (currentPlayer, state, handPos);
        -:  845:
        -:  846:      // debug: print number of cards after call
        -:  847:      //printf ("\nDebug: number cards in hand after: ");
        -:  848:      //printf ("%i\n", state->handCount[currentPlayer]);
    #####:  849:      return 0;
        -:  850:
        -:  851: /****     
        -:  852:      //+3 Cards
        -:  853:      for (i = 0; i < 3; i++)
        -:  854:	{
        -:  855:	  drawCard(currentPlayer, state);
        -:  856:	}
        -:  857:			
        -:  858:      //discard card from hand
        -:  859:      discardCard(handPos, currentPlayer, state, 0);
        -:  860:  ***/
        -:  861: 		
        -:  862:    // ***************************		
        -:  863:		// ******** VILLAGE **********
        -:  864:		// ***************************		
        -:  865:    case village:
        -:  866:    
       30:  867:      VillageAction (currentPlayer, state, handPos);
       30:  868:      return 0;
        -:  869:      
        -:  870:   /****   
        -:  871:      //+1 Card
        -:  872:      drawCard(currentPlayer, state);
        -:  873:			
        -:  874:      //+2 Actions
        -:  875:      state->numActions = state->numActions + 2;
        -:  876:			
        -:  877:      //discard played card from hand
        -:  878:      discardCard(handPos, currentPlayer, state, 0);
        -:  879:    ***/
        -:  880:		
        -:  881:    // ***************************		
        -:  882:		// ********  **********
        -:  883:		// ***************************		
        -:  884:    case baron:
    #####:  885:      state->numBuys++;//Increase buys by 1!
    #####:  886:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  887:	int p = 0;//Iterator for hand!
    #####:  888:	int card_not_discarded = 1;//Flag for discard set!
    #####:  889:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  890:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  891:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  892:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  893:	    state->discardCount[currentPlayer]++;
    #####:  894:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  895:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  896:	    }
    #####:  897:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  898:	    state->handCount[currentPlayer]--;
    #####:  899:	    card_not_discarded = 0;//Exit the loop
    #####:  900:	  }
    #####:  901:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  902:	    if(DEBUG) {
        -:  903:	      printf("No estate cards in your hand, invalid choice\n");
        -:  904:	      printf("Must gain an estate if there are any\n");
        -:  905:	    }
    #####:  906:	    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  907:	      gainCard(estate, state, 0, currentPlayer);
    #####:  908:	      state->supplyCount[estate]--;//Decrement estates
    #####:  909:	      if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  910:		isGameOver(state);
    #####:  911:	      }
    #####:  912:	    }
    #####:  913:	    card_not_discarded = 0;//Exit the loop
    #####:  914:	  }
        -:  915:			    
        -:  916:	  else{
    #####:  917:	    p++;//Next card
        -:  918:	  }
        -:  919:	}
    #####:  920:      }
        -:  921:			    
        -:  922:      else{
    #####:  923:	if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  924:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  925:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  926:	  if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  927:	    isGameOver(state);
    #####:  928:	  }
    #####:  929:	}
        -:  930:      }
        -:  931:	    
        -:  932:      
    #####:  933:      return 0;
        -:  934:		
        -:  935:    // ***************************		
        -:  936:		// ********  **********
        -:  937:		// ***************************		
        -:  938:    case great_hall:
        -:  939:      //+1 Card
    #####:  940:      drawCard(currentPlayer, state);
        -:  941:			
        -:  942:      //+1 Actions
    #####:  943:      state->numActions++;
        -:  944:			
        -:  945:      //discard card from hand
    #####:  946:      discardCard(handPos, currentPlayer, state, 0);
    #####:  947:      return 0;
        -:  948:		
        -:  949:    // ***************************		
        -:  950:		// ********  **********
        -:  951:		// ***************************		
        -:  952:    case minion:
        -:  953:      //+1 action
    #####:  954:      state->numActions++;
        -:  955:			
        -:  956:      //discard card from hand
    #####:  957:      discardCard(handPos, currentPlayer, state, 0);
        -:  958:			
    #####:  959:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  960:	{
    #####:  961:	  state->coins = state->coins + 2;
    #####:  962:	}
        -:  963:			
    #####:  964:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  965:	{
        -:  966:	  //discard hand
    #####:  967:	  while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -:  968:	    {
    #####:  969:	      discardCard(handPos, currentPlayer, state, 0);
        -:  970:	    }
        -:  971:				
        -:  972:	  //draw 4
    #####:  973:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  974:	    {
    #####:  975:	      drawCard(currentPlayer, state);
    #####:  976:	    }
        -:  977:				
        -:  978:	  //other players discard hand and redraw if hand size > 4
    #####:  979:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  980:	    {
    #####:  981:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  982:		{
    #####:  983:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  984:		    {
        -:  985:		      //discard hand
    #####:  986:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  987:			{
    #####:  988:			  discardCard(handPos, i, state, 0);
        -:  989:			}
        -:  990:							
        -:  991:		      //draw 4
    #####:  992:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  993:			{
    #####:  994:			  drawCard(i, state);
    #####:  995:			}
    #####:  996:		    }
    #####:  997:		}
    #####:  998:	    }
        -:  999:				
    #####: 1000:	}
    #####: 1001:      return 0;
        -: 1002:		
        -: 1003:		//*********************
        -: 1004:    //*********************
        -: 1005:    //*********************
        -: 1006:    
        -: 1007:    case steward:
    #####: 1008:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1009:	{
        -: 1010:	  //+2 cards
    #####: 1011:	  drawCard(currentPlayer, state);
    #####: 1012:	  drawCard(currentPlayer, state);
    #####: 1013:	}
    #####: 1014:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1015:	{
        -: 1016:	  //+2 coins
    #####: 1017:	  state->coins = state->coins + 2;
    #####: 1018:	}
        -: 1019:      else
        -: 1020:	{
        -: 1021:	  //trash 2 cards in hand
    #####: 1022:	  discardCard(choice2, currentPlayer, state, 1);
    #####: 1023:	  discardCard(choice3, currentPlayer, state, 1);
        -: 1024:	}
        -: 1025:			
        -: 1026:      //discard card from hand
    #####: 1027:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1028:      return 0;
        -: 1029:		
        -: 1030:    // ***************************		
        -: 1031:		// ********  **********
        -: 1032:		// ***************************		
        -: 1033:    case tribute:
    #####: 1034:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1035:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1036:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1037:	  state->deckCount[nextPlayer]--;
    #####: 1038:	}
    #####: 1039:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1040:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1041:	  state->discardCount[nextPlayer]--;
    #####: 1042:	}
        -: 1043:	else{
        -: 1044:	  //No Card to Reveal
        -: 1045:	  if (DEBUG){
        -: 1046:	    printf("No cards to reveal\n");
        -: 1047:	  }
        -: 1048:	}
    #####: 1049:      }
        -: 1050:	    
        -: 1051:      else{
    #####: 1052:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1053:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1054:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1055:	    state->deckCount[nextPlayer]++;
    #####: 1056:	    state->discard[nextPlayer][i] = -1;
    #####: 1057:	    state->discardCount[nextPlayer]--;
    #####: 1058:	  }
        -: 1059:			    
    #####: 1060:	  shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1061:	} 
    #####: 1062:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1063:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1064:	state->deckCount[nextPlayer]--;
    #####: 1065:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1066:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1067:	state->deckCount[nextPlayer]--;
        -: 1068:      }    
        -: 1069:		       
    #####: 1070:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1071:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1072:	state->playedCardCount++;
    #####: 1073:	tributeRevealedCards[1] = -1;
    #####: 1074:      }
        -: 1075:
    #####: 1076:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1077:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1078:	  state->coins += 2;
    #####: 1079:	}
        -: 1080:		    
    #####: 1081:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1082:	  drawCard(currentPlayer, state);
    #####: 1083:	  drawCard(currentPlayer, state);
    #####: 1084:	}
        -: 1085:	else{//Action Card
    #####: 1086:	  state->numActions = state->numActions + 2;
        -: 1087:	}
    #####: 1088:      }
        -: 1089:	    
    #####: 1090:      return 0;
        -: 1091:
        -: 1092:    // ***************************		
        -: 1093:		// ********  **********
        -: 1094:		// ***************************		
        -: 1095:		
        -: 1096:    case ambassador:
    #####: 1097:      j = 0;		//used to check if player has enough cards to discard
        -: 1098:
    #####: 1099:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1100:	{
    #####: 1101:	  return -1;				
        -: 1102:	}
        -: 1103:
    #####: 1104:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  return -1;
        -: 1107:	}
        -: 1108:
    #####: 1109:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1110:	{
    #####: 1111:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1112:	    {
    #####: 1113:	      j++;
    #####: 1114:	    }
    #####: 1115:	}
    #####: 1116:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1117:	{
    #####: 1118:	  return -1;				
        -: 1119:	}
        -: 1120:
        -: 1121:      if (DEBUG) 
        -: 1122:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1123:
        -: 1124:      //increase supply count for choosen card by amount being discarded
    #####: 1125:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1126:			
        -: 1127:      //each other player gains a copy of revealed card
    #####: 1128:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1129:	{
    #####: 1130:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1131:	    {
    #####: 1132:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1133:	    }
    #####: 1134:	}
        -: 1135:
        -: 1136:      //discard played card from hand
    #####: 1137:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1138:
        -: 1139:      //trash copies of cards returned to supply
    #####: 1140:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1141:	{
    #####: 1142:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1143:	    {
    #####: 1144:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1145:		{
    #####: 1146:		  discardCard(i, currentPlayer, state, 1);
    #####: 1147:		  break;
        -: 1148:		}
    #####: 1149:	    }
    #####: 1150:	}			
        -: 1151:
    #####: 1152:      return 0;
        -: 1153:
        -: 1154:    // ***************************		
        -: 1155:		// ******** CUT PURSE **********
        -: 1156:		// ***************************		
        -: 1157:
        -: 1158:    case cutpurse:
        -: 1159:      
        -: 1160:      // Refactored code in separate function
    #####: 1161:      CutPurseAction (currentPlayer, state, handPos);
    #####: 1162:      return 0;
        -: 1163:
        -: 1164:/*** commented out and moved code to separate function
        -: 1165:      updateCoins(currentPlayer, state, 2);
        -: 1166:      for (i = 0; i < state->numPlayers; i++)
        -: 1167:	{
        -: 1168:	  if (i != currentPlayer)
        -: 1169:	    {
        -: 1170:	      for (j = 0; j < state->handCount[i]; j++)
        -: 1171:		{
        -: 1172:		  if (state->hand[i][j] == copper)
        -: 1173:		    {
        -: 1174:		      discardCard(j, i, state, 0);
        -: 1175:		      break;
        -: 1176:		    }
        -: 1177:		  if (j == state->handCount[i])
        -: 1178:		    {
        -: 1179:		      for (k = 0; k < state->handCount[i]; k++)
        -: 1180:			{
        -: 1181:			  if (DEBUG)
        -: 1182:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1183:			}	
        -: 1184:		      break;
        -: 1185:		    }		
        -: 1186:		}
        -: 1187:					
        -: 1188:	    }
        -: 1189:				
        -: 1190:	}				
        -: 1191:      //discard played card from hand
        -: 1192:      discardCard(handPos, currentPlayer, state, 0);			
        -: 1193:***/
        -: 1194:
        -: 1195:    // ***************************		
        -: 1196:		// ******** embargo **********
        -: 1197:		// ***************************				
        -: 1198:    case embargo: 
        -: 1199:      //+2 Coins
    #####: 1200:      state->coins = state->coins + 2;
        -: 1201:			
        -: 1202:      //see if selected pile is in play
    #####: 1203:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1204:	{
    #####: 1205:	  return -1;
        -: 1206:	}
        -: 1207:			
        -: 1208:      //add embargo token to selected supply pile
    #####: 1209:      state->embargoTokens[choice1]++;
        -: 1210:			
        -: 1211:      //trash card
    #####: 1212:      discardCard(handPos, currentPlayer, state, 1);		
    #####: 1213:      return 0;
        -: 1214:
        -: 1215:    // ***************************		
        -: 1216:		// ******** Outpost **********
        -: 1217:		// ***************************		
        -: 1218:		
        -: 1219:    case outpost:
        -: 1220:      //set outpost flag
    #####: 1221:      state->outpostPlayed++;
        -: 1222:			
        -: 1223:      //discard card
    #####: 1224:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1225:      return 0;
        -: 1226:
        -: 1227:    // ***************************		
        -: 1228:		// ******** SALVAGER **********
        -: 1229:		// ***************************		
        -: 1230:    case salvager:
        -: 1231:      //+1 buy
    #####: 1232:      state->numBuys++;
        -: 1233:			
    #####: 1234:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1235:	{
        -: 1236:	  //gain coins equal to trashed card
    #####: 1237:	  state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1238:	  //trash card
    #####: 1239:	  discardCard(choice1, currentPlayer, state, 1);	
    #####: 1240:	}
        -: 1241:			
        -: 1242:      //discard card
    #####: 1243:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1244:      return 0;
        -: 1245:
        -: 1246:    // ***************************		
        -: 1247:		// ******** SEA HAG **********
        -: 1248:		// ***************************		
        -: 1249:    case sea_hag:
    #####: 1250:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1251:    	  if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1252:    		  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1253:    		  state->discardCount[i]++;
    #####: 1254:    		  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1255:    	  }
    #####: 1256:      }
    #####: 1257:      return 0;
        -: 1258:
        -: 1259:      // ***************************
        -: 1260:  		// ******** TREASURE MAP **********
        -: 1261:  		// ***************************
        -: 1262:    case treasure_map:
        -: 1263:
        -: 1264:    	//int returnval;
        -: 1265:    	//returnval = TreasureMapAction (currentPlayer, state, handPos);
    #####: 1266:    	return (TreasureMapAction (currentPlayer, state, handPos));
        -: 1267:
        -: 1268:    	/** commented out and moved to separate function
        -: 1269:      //search hand for another treasure_map
        -: 1270:      index = -1;
        -: 1271:      for (i = 0; i < state->handCount[currentPlayer]; i++)
        -: 1272:      {
        -: 1273:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
        -: 1274:	    {
        -: 1275:	      index = i;
        -: 1276:	      break;
        -: 1277:	    }
        -: 1278:      }
        -: 1279:      if (index > -1) {
        -: 1280:		  //trash both treasure cards
        -: 1281:		  discardCard(handPos, currentPlayer, state, 1);
        -: 1282:		  discardCard(index, currentPlayer, state, 1);
        -: 1283:
        -: 1284:		  //gain 4 Gold cards
        -: 1285:		  for (i = 0; i < 4; i++) {
        -: 1286:			  gainCard(gold, state, 1, currentPlayer);
        -: 1287:		  }
        -: 1288:				
        -: 1289:		  //return success
        -: 1290:		  return 1;
        -: 1291:      }
        -: 1292:			
        -: 1293:      //no second treasure_map found in hand
        -: 1294:      return -1;
        -: 1295:      */
        -: 1296:    }
        -: 1297:
    #####: 1298:  return -1;
       30: 1299:}
        -: 1300:
function discardCard called 30 returned 100% blocks executed 90%
        -: 1301:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1302:{
        -: 1303:  //if card is not trashed, added to Played pile 
       30: 1304:  if (trashFlag < 1) {
branch  0 taken 100%
branch  1 taken 0%
        -: 1305:      //add card to played pile
       30: 1306:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
       30: 1307:      state->playedCardCount++;
       30: 1308:   }
        -: 1309:  //set played card to -1
       30: 1310:  state->hand[currentPlayer][handPos] = -1;
        -: 1311:	
        -: 1312:  //remove card from player's hand
       30: 1313:  if ( handPos == (state->handCount[currentPlayer] - 1) ) { //last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1314:      //reduce number of cards in hand
    #####: 1315:      state->handCount[currentPlayer]--;
       30: 1316:  } else if ( state->handCount[currentPlayer] == 1 ) { //only one card in hand
branch  0 taken 17%
branch  1 taken 83%
        -: 1317:      //reduce number of cards in hand
        5: 1318:      state->handCount[currentPlayer]--;
        5: 1319:  } else {
        -: 1320:      //replace discarded card with last card in hand
       25: 1321:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1322:      //set last card to -1
       25: 1323:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1324:      //reduce number of cards in hand
       25: 1325:      state->handCount[currentPlayer]--;
        -: 1326:   }
       30: 1327:  return 0;
        -: 1328:}
        -: 1329:
function gainCard called 60 returned 100% blocks executed 72%
        -: 1330:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1331:{
        -: 1332:  //Note: supplyPos is enum of choosen card
        -: 1333:	
        -: 1334:  //check if supply pile is empty (0) or card is not used in game (-1)
       60: 1335:  if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1336:    {
    #####: 1337:      return -1;
        -: 1338:    }
        -: 1339:	
        -: 1340:  //added card for [whoseTurn] current player:
        -: 1341:  // toFlag = 0 : add to discard
        -: 1342:  // toFlag = 1 : add to deck
        -: 1343:  // toFlag = 2 : add to hand
        -: 1344:
       60: 1345:  if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1346:    {
    #####: 1347:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1348:      state->deckCount[player]++;
    #####: 1349:    }
       60: 1350:  else if (toFlag == 2)
branch  0 taken 100%
branch  1 taken 0%
        -: 1351:    {
       60: 1352:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
       60: 1353:      state->handCount[player]++;
       60: 1354:    }
        -: 1355:  else
        -: 1356:    {
    #####: 1357:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1358:      state->discardCount[player]++;
        -: 1359:    }
        -: 1360:	
        -: 1361:  //decrease number in supply pile
       60: 1362:  state->supplyCount[supplyPos]--;
        -: 1363:	 
       60: 1364:  return 0;
       60: 1365:}
        -: 1366:
function updateCoins called 15 returned 100% blocks executed 85%
        -: 1367:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1368:{
        -: 1369:  int i;
        -: 1370:	
        -: 1371:  //reset coin count
       15: 1372:  state->coins = 0;
        -: 1373:
        -: 1374:  //add coins for each Treasure card in player's hand
      180: 1375:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -: 1376:    {
       75: 1377:      if (state->hand[player][i] == copper)
branch  0 taken 80%
branch  1 taken 20%
        -: 1378:	{
       60: 1379:	  state->coins += 1;
       60: 1380:	}
       15: 1381:      else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1382:	{
    #####: 1383:	  state->coins += 2;
    #####: 1384:	}
       15: 1385:      else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1386:	{
    #####: 1387:	  state->coins += 3;
    #####: 1388:	}	
       75: 1389:    }	
        -: 1390:
        -: 1391:  //add bonus
       15: 1392:  state->coins += bonus;
        -: 1393:
       15: 1394:  return 0;
        -: 1395:}
        -: 1396:
        -: 1397://***************************************
        -: 1398://***** REFACTORED CODE Week2 ***********
        -: 1399://***************************************
        -: 1400:
function TreasureMapAction called 0 returned 0% blocks executed 0%
        -: 1401:int TreasureMapAction (int currentPlayer, struct gameState *state, int handPos) {
        -: 1402:	//search hand for another treasure_map
    #####: 1403:	int index = -1;
        -: 1404:	int i;
    #####: 1405:	for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1406:		if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
    #####: 1407:			index = i;
    #####: 1408:			break;
        -: 1409:		}
    #####: 1410:	}
    #####: 1411:	if (index > -1) {
branch  0 never executed
branch  1 never executed
        -: 1412:		//trash both treasure cards
    #####: 1413:		discardCard(handPos, currentPlayer, state, 1);
    #####: 1414:		discardCard(index, currentPlayer, state, 1);
        -: 1415:
        -: 1416:		//gain 4 Gold cards
    #####: 1417:		for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1418:			gainCard(gold, state, 1, currentPlayer);
    #####: 1419:		}
        -: 1420:
        -: 1421:		//return success
    #####: 1422:		return 1;
        -: 1423:	}
        -: 1424:
        -: 1425:	//no second treasure_map found in hand
    #####: 1426:	return -1;
    #####: 1427:}
        -: 1428:
function SmithyAction called 0 returned 0% blocks executed 0%
        -: 1429:int SmithyAction (int currentPlayer, struct gameState *state, int handPos) {
        -: 1430:  int i;
        -: 1431:  // printf ("\nDebug: Smithy Action refactor code\n");
        -: 1432:
        -: 1433:/** Original Smithy action without bugs
        -: 1434:  //+3 Cards
        -: 1435:  for (i = 0; i < 3; i++)
        -: 1436:	{
        -: 1437:	  drawCard(currentPlayer, state);
        -: 1438:	}	
        -: 1439:**/ 
        -: 1440:
        -: 1441:  // *** ADDING BUG +4 Cards (instead of +3 cards!!)
    #####: 1442:  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1443:	{
    #####: 1444:	  drawCard(currentPlayer, state);
    #####: 1445:	}	
        -: 1446:	
        -: 1447:  //discard card from hand
    #####: 1448:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1449:  return 0;
        -: 1450:}
        -: 1451:
        -: 1452:
        -: 1453:
function AdventurerAction called 0 returned 0% blocks executed 0%
        -: 1454:int AdventurerAction (int currentPlayer, struct gameState *state, int handPos) {
    #####: 1455:  int drawntreasure=0;
    #####: 1456:  int z = 0; // for temp hand counter
        -: 1457:  int cardDrawn;
        -: 1458:  int temphand[MAX_HAND];
        -: 1459:  
    #####: 1460:  printf ("\nDebug: Adventurer Action refactor code\n");
        -: 1461:
    #####: 1462:  while(drawntreasure<2){
branch  0 never executed
branch  1 never executed
    #####: 1463:	  if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 never executed
branch  1 never executed
    #####: 1464:	  shuffle(currentPlayer, state);
    #####: 1465:	  }
    #####: 1466:	  drawCard(currentPlayer, state);
    #####: 1467:	  cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -: 1468:
        -: 1469:/***  Original Adventurer action without bugs
        -: 1470:	  if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -: 1471:***/
        -: 1472:    // *** ADDING BUG if statement does not check for gold, just copper and silver
    #####: 1473:	  if (cardDrawn == copper || cardDrawn == silver)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1474:
    #####: 1475:	    drawntreasure++;
        -: 1476:	  else {
    #####: 1477:	    temphand[z]=cardDrawn;
    #####: 1478:	    state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####: 1479:	    z++;
        -: 1480:	  }
        -: 1481:  }
    #####: 1482:  while(z-1>=0){
branch  0 never executed
branch  1 never executed
    #####: 1483:	  state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####: 1484:	  z=z-1;
        -: 1485:  }
    #####: 1486:  return 0;
        -: 1487:}
        -: 1488:
        -: 1489:
        -: 1490:
        -: 1491:
        -: 1492:
function VillageAction called 30 returned 100% blocks executed 100%
        -: 1493:int VillageAction (int currentPlayer, struct gameState *state, int handPos) {
        -: 1494:  //printf ("\nDebug: Village Action refactor code\n");
        -: 1495:  //+1 Card
       30: 1496:  drawCard(currentPlayer, state);
        -: 1497:
        -: 1498:/***  Original Village Action action without bugs			
        -: 1499:  //+2 Actions
        -: 1500:  state->numActions = state->numActions + 2;
        -: 1501:***/
        -: 1502:	// *** ADDING BUG adding 3 more actions instead of 2
       30: 1503:  state->numActions = state->numActions + 3;  
        -: 1504:  
        -: 1505:  //discard played card from hand
       30: 1506:  discardCard(handPos, currentPlayer, state, 0);
        -: 1507:  
       30: 1508:  return 0;
        -: 1509:}
        -: 1510:
        -: 1511:
        -: 1512:
        -: 1513:
        -: 1514:
function CouncilRoomAction called 0 returned 0% blocks executed 0%
        -: 1515:int CouncilRoomAction (int currentPlayer, struct gameState *state, int handPos) {
        -: 1516:  int i;
    #####: 1517:  printf ("\nDebug: Council Room Action refactor code\n");
        -: 1518:  //+4 Cards
    #####: 1519:  for (i = 0; i < 4; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1520:	  drawCard(currentPlayer, state);
    #####: 1521:	}
        -: 1522:	//+1 Buy
    #####: 1523:  state->numBuys++;
        -: 1524:
        -: 1525:/***  Original Council Room action without bugs			
        -: 1526:  //Each other player draws a card
        -: 1527:  for (i = 0; i < state->numPlayers; i++) {
        -: 1528:***/
        -: 1529:  // *** ADDING BUG reducing the other players that need to draw card by 1
    #####: 1530:  for (i = 0; i < (state->numPlayers-1); i++) {
branch  0 never executed
branch  1 never executed
    #####: 1531:	  if ( i != currentPlayer ) {
branch  0 never executed
branch  1 never executed
    #####: 1532:	      drawCard(i, state);
    #####: 1533:	  }
    #####: 1534:	}
        -: 1535:	//put played card in played card pile
    #####: 1536:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1537:  return 0;
        -: 1538:}
        -: 1539:
        -: 1540:
        -: 1541:
        -: 1542:
function CutPurseAction called 0 returned 0% blocks executed 0%
        -: 1543:int CutPurseAction (int currentPlayer, struct gameState *state, int handPos) {
        -: 1544:  int i, j, k;
    #####: 1545:  printf ("\nDebug: Cut Purse Action refactor code\n");
        -: 1546:  
    #####: 1547:  updateCoins(currentPlayer, state, 2);
    #####: 1548:  for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1549:	  if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1550:	    for (j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
        -: 1551:	    
        -: 1552:	    /***  Original Council Room action without bugs		
        -: 1553:		    if (state->hand[i][j] == copper) {
        -: 1554:		  ***/
        -: 1555:        // *** ADDING BUG other players discard silver INSTEAD of copper
    #####: 1556:		    if (state->hand[i][j] == silver) {		    
branch  0 never executed
branch  1 never executed
    #####: 1557:		      discardCard(j, i, state, 0);
    #####: 1558:		      break;
        -: 1559:		    }
    #####: 1560:		    if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####: 1561:		      for (k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -: 1562:			      if (DEBUG)
        -: 1563:			      printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
    #####: 1564:			    }	
    #####: 1565:		      break;
        -: 1566:		    }		
    #####: 1567:		  }		
    #####: 1568:	  }		
    #####: 1569:	}				
        -: 1570:  //discard played card from hand
    #####: 1571:  discardCard(handPos, currentPlayer, state, 0);			
    #####: 1572:  return 0;
        -: 1573:}
        -: 1574:
        -: 1575://end of dominion.c
        -: 1576:
