        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:8
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 420 returned 100% blocks executed 83%
      420:    8:int compare(const void* a, const void* b) {
      420:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
      420:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
      112:   12:    return -1;
      308:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 14 returned 100% blocks executed 88%
       14:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
       14:   44:  SelectStream(1);
call    0 returned 100%
       14:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
       14:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
       14:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
      154:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
     1540:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
     1400:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
       14:   73:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   74:    {
       14:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
    #####:   77:  else if (numPlayers == 3)
branch  0 never executed
branch  1 never executed
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
    #####:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
       14:   87:  if (numPlayers == 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   88:    {
       14:   89:      state->supplyCount[estate] = 8;
       14:   90:      state->supplyCount[duchy] = 8;
       14:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
    #####:   95:      state->supplyCount[estate] = 12;
    #####:   96:      state->supplyCount[duchy] = 12;
    #####:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
       14:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
       14:  102:  state->supplyCount[silver] = 40;
       14:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
      294:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
     2310:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
     2170:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
      140:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
       56:  115:		  if (numPlayers == 2){ 
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
       28:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
    #####:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
      112:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
      140:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
     2030:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
       42:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  139:    {
       28:  140:      state->deckCount[i] = 0;
      112:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
       84:  143:	  state->deck[i][j] = estate;
       84:  144:	  state->deckCount[i]++;
        -:  145:	}
      224:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
      196:  148:	  state->deck[i][j] = copper;
      196:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
       42:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  155:    {
       28:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
       42:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
       28:  166:      state->handCount[i] = 0;
       28:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
      392:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
      378:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
       14:  182:  state->outpostPlayed = 0;
       14:  183:  state->phase = 0;
       14:  184:  state->numActions = 1;
       14:  185:  state->numBuys = 1;
       14:  186:  state->playedCardCount = 0;
       14:  187:  state->whoseTurn = 0;
       14:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
       84:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       70:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
       14:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
       14:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 28 returned 100% blocks executed 94%
       28:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
       28:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
       28:  209:  if (state->deckCount[player] < 1)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  210:    return -1;
       28:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
      336:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      280:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
      280:  216:    newDeck[newDeckPos] = state->deck[player][card];
      280:  217:    newDeckPos++;
      980:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
      700:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
      280:  221:    state->deckCount[player]--;
        -:  222:  }
      308:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
      280:  224:    state->deck[player][i] = newDeck[i];
      280:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
       28:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 14 returned 100% blocks executed 93%
       14:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
       14:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
       14:  237:  if (state->phase != 0)
branch  0 taken 29% (fallthrough)
branch  1 taken 71%
        -:  238:    {
        4:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
       10:  243:  if ( state->numActions < 1 )
branch  0 taken 40% (fallthrough)
branch  1 taken 60%
        -:  244:    {
        4:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
        6:  249:  card = handCard(handPos, state);
call    0 returned 100%
        -:  250:	
        -:  251:  //check if selected card is an action
        6:  252:  if ( card < adventurer || card > treasure_map )
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:  253:    {
        4:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
        2:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
        2:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
        2:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 returned 100%
        -:  268:	
        2:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 8 returned 100% blocks executed 100%
        8:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
        8:  280:  who = state->whoseTurn;
        -:  281:
        8:  282:  if (state->numBuys < 1){
branch  0 taken 25% (fallthrough)
branch  1 taken 75%
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
        2:  285:    return -1;
        6:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 returned 100%
branch  1 taken 33% (fallthrough)
branch  2 taken 67%
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
        2:  289:    return -1;
        4:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 returned 100%
branch  1 taken 50% (fallthrough)
branch  2 taken 50%
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
        2:  293:    return -1;
        -:  294:  } else {
        2:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
        2:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 returned 100%
        -:  298:  
        2:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 returned 100%
        2:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
        2:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 6 returned 100% blocks executed 100%
        6:  315:int handCard(int handPos, struct gameState *state) {
        6:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        6:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 13 returned 100% blocks executed 100%
       13:  320:int supplyCount(int card, struct gameState *state) {
       13:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 10 returned 100% blocks executed 100%
       10:  346:int whoseTurn(struct gameState *state) {
       10:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 2 returned 100% blocks executed 100%
        2:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
        2:  353:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -:  354:  
        -:  355:  //Discard hand
        7:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 71%
branch  1 taken 29% (fallthrough)
        5:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
        5:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
        2:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
        2:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
        1:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
        2:  370:  state->outpostPlayed = 0;
        2:  371:  state->phase = 0;
        2:  372:  state->numActions = 1;
        2:  373:  state->coins = 0;
        2:  374:  state->numBuys = 1;
        2:  375:  state->playedCardCount = 0;
        2:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
       12:  380:  for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
       10:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 returned 100%
        -:  382:  }
        -:  383:
        -:  384:  //Update money
        2:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 returned 100%
        -:  386:
        2:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 12 returned 100% blocks executed 100%
       12:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
       12:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 17% (fallthrough)
branch  1 taken 83%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
       10:  401:  j = 0;
      260:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      250:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 5% (fallthrough)
branch  1 taken 95%
        -:  405:	{
       12:  406:	  j++;
        -:  407:	}
        -:  408:    }
       10:  409:  if ( j >= 3)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        8:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 102 returned 100% blocks executed 38%
      102:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
      102:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
    #####:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
    #####:  538:    state->deckCount[player] = state->discardCount[player];
    #####:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
    #####:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 never executed
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
    #####:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
    #####:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
    #####:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
    #####:  559:    if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
      102:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
      102:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
      102:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      102:  576:    state->deckCount[player]--;
      102:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
      102:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 10 returned 100% blocks executed 20%
       10:  583:int getCost(int cardNumber)
        -:  584:{
       10:  585:  switch( cardNumber ) 
branch  0 taken 0%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 20%
branch  5 taken 10%
branch  6 taken 10%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 60%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
branch 21 taken 0%
branch 22 taken 0%
branch 23 taken 0%
branch 24 taken 0%
branch 25 taken 0%
branch 26 taken 0%
branch 27 taken 0%
        -:  586:    {
        -:  587:    case curse:
    #####:  588:      return 0;
        -:  589:    case estate:
    #####:  590:      return 2;
        -:  591:    case duchy:
    #####:  592:      return 5;
        -:  593:    case province:
    #####:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        1:  598:      return 3;
        -:  599:    case gold:
        1:  600:      return 6;
        -:  601:    case adventurer:
    #####:  602:      return 6;
        -:  603:    case council_room:
    #####:  604:      return 5;
        -:  605:    case feast:
    #####:  606:      return 4;
        -:  607:    case gardens:
    #####:  608:      return 4;
        -:  609:    case mine:
    #####:  610:      return 5;
        -:  611:    case remodel:
    #####:  612:      return 4;
        -:  613:    case smithy:
        6:  614:      return 4;
        -:  615:    case village:
    #####:  616:      return 3;
        -:  617:    case baron:
    #####:  618:      return 4;
        -:  619:    case great_hall:
    #####:  620:      return 3;
        -:  621:    case minion:
    #####:  622:      return 5;
        -:  623:    case steward:
    #####:  624:      return 3;
        -:  625:    case tribute:
    #####:  626:      return 5;
        -:  627:    case ambassador:
    #####:  628:      return 3;
        -:  629:    case cutpurse:
    #####:  630:      return 4;
        -:  631:    case embargo: 
    #####:  632:      return 2;
        -:  633:    case outpost:
    #####:  634:      return 5;
        -:  635:    case salvager:
    #####:  636:      return 4;
        -:  637:    case sea_hag:
    #####:  638:      return 4;
        -:  639:    case treasure_map:
    #####:  640:      return 4;
        -:  641:    }
        -:  642:	
    #####:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 2 returned 100% blocks executed 4%
        2:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
        2:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
        2:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  
        -:  658:  int temphand[MAX_HAND];// moved above the if statement
        -:  659:  
        2:  660:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:  661:    nextPlayer = 0;
        -:  662:  }
        -:  663:  
        -:  664:	
        -:  665:  //uses switch to select card and perform actions
        2:  666:  switch( card ) 
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 0%
branch  4 taken 0%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  667:    {
        -:  668:    case adventurer:
        2:  669:    playAdventurer(currentPlayer, state);
call    0 returned 100%
        2:  670:    return 0;
        -:  671:			
        -:  672:    case council_room:
        -:  673:      //+4 Cards
    #####:  674:      for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  675:	{
    #####:  676:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  677:	}
        -:  678:			
        -:  679:      //+1 Buy
    #####:  680:      state->numBuys++;
        -:  681:			
        -:  682:      //Each other player draws a card
    #####:  683:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  684:	{
    #####:  685:	  if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  686:	    {
    #####:  687:	      drawCard(i, state);
call    0 never executed
        -:  688:	    }
        -:  689:	}
        -:  690:			
        -:  691:      //put played card in played card pile
    #####:  692:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  693:			
    #####:  694:      return 0;
        -:  695:			
        -:  696:    case feast:
        -:  697:      //gain card with cost up to 5
        -:  698:      //Backup hand
    #####:  699:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  700:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  701:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  702:      }
        -:  703:      //Backup hand
        -:  704:
        -:  705:      //Update Coins for Buy
    #####:  706:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  707:      x = 1;//Condition to loop on
    #####:  708:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  709:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  710:	  if (DEBUG)
        -:  711:	    printf("None of that card left, sorry!\n");
        -:  712:
        -:  713:	  if (DEBUG){
        -:  714:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  715:	  }
        -:  716:	}
    #####:  717:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  718:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  719:
        -:  720:	  if (DEBUG){
        -:  721:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  722:	  }
        -:  723:	}
        -:  724:	else{
        -:  725:
        -:  726:	  if (DEBUG){
        -:  727:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  728:	  }
        -:  729:
    #####:  730:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  731:	  x = 0;//No more buying cards
        -:  732:
        -:  733:	  if (DEBUG){
        -:  734:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  735:	  }
        -:  736:
        -:  737:	}
        -:  738:      }     
        -:  739:
        -:  740:      //Reset Hand
    #####:  741:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  742:	state->hand[currentPlayer][i] = temphand[i];
    #####:  743:	temphand[i] = -1;
        -:  744:      }
        -:  745:      //Reset Hand
        -:  746:      			
    #####:  747:      return 0;
        -:  748:			
        -:  749:    case gardens:
    #####:  750:      return -1;
        -:  751:			
        -:  752:    case mine:
    #####:  753:      playMine(currentPlayer, state, choice1, choice2, handPos);			
call    0 never executed
    #####:  754:      return 0;
        -:  755:			
        -:  756:    case remodel:
    #####:  757:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  758:
    #####:  759:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  760:	{
    #####:  761:	  return -1;
        -:  762:	}
        -:  763:
    #####:  764:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  765:
        -:  766:      //discard card from hand
    #####:  767:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  768:
        -:  769:      //discard trashed card
    #####:  770:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  771:	{
    #####:  772:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  773:	    {
    #####:  774:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  775:	      break;
        -:  776:	    }
        -:  777:	}
    #####:  778:      return 0;
        -:  779:		
        -:  780:    case smithy:
        -:  781:      // Play the Smithy Card
    #####:  782:      playSmithy(currentPlayer, state);
call    0 never executed
    #####:  783:      return 0;
        -:  784:		
        -:  785:    case village:
        -:  786:      //+1 Card
    #####:  787:      drawCard(currentPlayer, state);
call    0 never executed
        -:  788:			
        -:  789:      //+2 Actions
    #####:  790:      state->numActions = state->numActions + 2;
        -:  791:			
        -:  792:      //discard played card from hand
    #####:  793:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  794:      return 0;
        -:  795:		
        -:  796:    case baron:
    #####:  797:      playBaron(currentPlayer, state, choice1);    
call    0 never executed
    #####:  798:      return 0;
        -:  799:		
        -:  800:    case great_hall:
        -:  801:      //+1 Card
    #####:  802:      drawCard(currentPlayer, state);
call    0 never executed
        -:  803:			
        -:  804:      //+1 Actions
    #####:  805:      state->numActions++;
        -:  806:			
        -:  807:      //discard card from hand
    #####:  808:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  809:      return 0;
        -:  810:		
        -:  811:    case minion:
    #####:  812:      playMinion(currentPlayer, state, choice1, choice2, handPos);
call    0 never executed
    #####:  813:      return 0;
        -:  814:		
        -:  815:    case steward:
    #####:  816:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  817:	{
        -:  818:	  //+2 cards
    #####:  819:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  820:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  821:	}
    #####:  822:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  823:	{
        -:  824:	  //+2 coins
    #####:  825:	  state->coins = state->coins + 2;
        -:  826:	}
        -:  827:      else
        -:  828:	{
        -:  829:	  //trash 2 cards in hand
    #####:  830:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  831:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  832:	}
        -:  833:			
        -:  834:      //discard card from hand
    #####:  835:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  836:      return 0;
        -:  837:		
        -:  838:    case tribute:
    #####:  839:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####:  840:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  841:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  842:	  state->deckCount[nextPlayer]--;
        -:  843:	}
    #####:  844:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####:  845:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  846:	  state->discardCount[nextPlayer]--;
        -:  847:	}
        -:  848:	else{
        -:  849:	  //No Card to Reveal
        -:  850:	  if (DEBUG){
        -:  851:	    printf("No cards to reveal\n");
        -:  852:	  }
        -:  853:	}
        -:  854:      }
        -:  855:	    
        -:  856:      else{
    #####:  857:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####:  858:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  859:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  860:	    state->deckCount[nextPlayer]++;
    #####:  861:	    state->discard[nextPlayer][i] = -1;
    #####:  862:	    state->discardCount[nextPlayer]--;
        -:  863:	  }
        -:  864:			    
    #####:  865:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -:  866:	} 
    #####:  867:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  868:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  869:	state->deckCount[nextPlayer]--;
    #####:  870:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  871:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  872:	state->deckCount[nextPlayer]--;
        -:  873:      }    
        -:  874:		       
    #####:  875:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####:  876:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  877:	state->playedCardCount++;
    #####:  878:	tributeRevealedCards[1] = -1;
        -:  879:      }
        -:  880:
    #####:  881:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####:  882:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####:  883:	  state->coins += 2;
        -:  884:	}
        -:  885:		    
    #####:  886:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####:  887:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  888:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  889:	}
        -:  890:	else{//Action Card
    #####:  891:	  state->numActions = state->numActions + 2;
        -:  892:	}
        -:  893:      }
        -:  894:	    
    #####:  895:      return 0;
        -:  896:		
        -:  897:    case ambassador:
    #####:  898:      j = 0;		//used to check if player has enough cards to discard
        -:  899:
    #####:  900:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  901:	{
    #####:  902:	  return -1;				
        -:  903:	}
        -:  904:
    #####:  905:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -:  906:	{
    #####:  907:	  return -1;
        -:  908:	}
        -:  909:
    #####:  910:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  911:	{
    #####:  912:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -:  913:	    {
    #####:  914:	      j++;
        -:  915:	    }
        -:  916:	}
    #####:  917:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -:  918:	{
    #####:  919:	  return -1;				
        -:  920:	}
        -:  921:
        -:  922:      if (DEBUG) 
        -:  923:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  924:
        -:  925:      //increase supply count for choosen card by amount being discarded
    #####:  926:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  927:			
        -:  928:      //each other player gains a copy of revealed card
    #####:  929:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  930:	{
    #####:  931:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  932:	    {
    #####:  933:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -:  934:	    }
        -:  935:	}
        -:  936:
        -:  937:      //discard played card from hand
    #####:  938:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  939:
        -:  940:      //trash copies of cards returned to supply
    #####:  941:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -:  942:	{
    #####:  943:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  944:	    {
    #####:  945:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -:  946:		{
    #####:  947:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####:  948:		  break;
        -:  949:		}
        -:  950:	    }
        -:  951:	}			
        -:  952:
    #####:  953:      return 0;
        -:  954:		
        -:  955:    case cutpurse:
        -:  956:
    #####:  957:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####:  958:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  959:	{
    #####:  960:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  961:	    {
    #####:  962:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -:  963:		{
    #####:  964:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -:  965:		    {
    #####:  966:		      discardCard(j, i, state, 0);
call    0 never executed
    #####:  967:		      break;
        -:  968:		    }
    #####:  969:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -:  970:		    {
    #####:  971:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -:  972:			{
        -:  973:			  if (DEBUG)
        -:  974:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  975:			}	
    #####:  976:		      break;
        -:  977:		    }		
        -:  978:		}
        -:  979:					
        -:  980:	    }
        -:  981:				
        -:  982:	}				
        -:  983:
        -:  984:      //discard played card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -:  986:
    #####:  987:      return 0;
        -:  988:
        -:  989:		
        -:  990:    case embargo: 
        -:  991:      //+2 Coins
    #####:  992:      state->coins = state->coins + 2;
        -:  993:			
        -:  994:      //see if selected pile is in play
    #####:  995:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -:  996:	{
    #####:  997:	  return -1;
        -:  998:	}
        -:  999:			
        -: 1000:      //add embargo token to selected supply pile
    #####: 1001:      state->embargoTokens[choice1]++;
        -: 1002:			
        -: 1003:      //trash card
    #####: 1004:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1005:      return 0;
        -: 1006:		
        -: 1007:    case outpost:
        -: 1008:      //set outpost flag
    #####: 1009:      state->outpostPlayed++;
        -: 1010:			
        -: 1011:      //discard card
    #####: 1012:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1013:      return 0;
        -: 1014:		
        -: 1015:    case salvager:
        -: 1016:      //+1 buy
    #####: 1017:      state->numBuys++;
        -: 1018:			
    #####: 1019:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1020:	{
        -: 1021:	  //gain coins equal to trashed card
    #####: 1022:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1023:	  //trash card
    #####: 1024:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1025:	}
        -: 1026:			
        -: 1027:      //discard card
    #####: 1028:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1029:      return 0;
        -: 1030:		
        -: 1031:    case sea_hag:
    #####: 1032:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1033:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1034:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1035:	  state->discardCount[i]++;
    #####: 1036:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1037:	}
        -: 1038:      }
    #####: 1039:      return 0;
        -: 1040:		
        -: 1041:    case treasure_map:
        -: 1042:      //search hand for another treasure_map
    #####: 1043:      index = -1;
    #####: 1044:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1045:	{
    #####: 1046:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1047:	    {
    #####: 1048:	      index = i;
    #####: 1049:	      break;
        -: 1050:	    }
        -: 1051:	}
    #####: 1052:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1053:	{
        -: 1054:	  //trash both treasure cards
    #####: 1055:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1056:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1057:
        -: 1058:	  //gain 4 Gold cards
    #####: 1059:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1060:	    {
    #####: 1061:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1062:	    }
        -: 1063:				
        -: 1064:	  //return success
    #####: 1065:	  return 1;
        -: 1066:	}
        -: 1067:			
        -: 1068:      //no second treasure_map found in hand
    #####: 1069:      return -1;
        -: 1070:    }
        -: 1071:	
    #####: 1072:  return -1;
        -: 1073:}
        -: 1074:
function discardCard called 4 returned 100% blocks executed 78%
        4: 1075:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1076:{
        -: 1077:	
        -: 1078:  //if card is not trashed, added to Played pile 
        4: 1079:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1080:    {
        -: 1081:      //add card to played pile
        4: 1082:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        4: 1083:      state->playedCardCount++;
        -: 1084:    }
        -: 1085:	
        -: 1086:  //set played card to -1
        4: 1087:  state->hand[currentPlayer][handPos] = -1;
        -: 1088:	
        -: 1089:  //remove card from player's hand
        4: 1090:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1091:    {
        -: 1092:      //reduce number of cards in hand
    #####: 1093:      state->handCount[currentPlayer]--;
        -: 1094:    }
        4: 1095:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1096:    {
        -: 1097:      //reduce number of cards in hand
    #####: 1098:      state->handCount[currentPlayer]--;
        -: 1099:    }
        -: 1100:  else 	
        -: 1101:    {
        -: 1102:      //replace discarded card with last card in hand
        4: 1103:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1104:      //set last card to -1
        4: 1105:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1106:      //reduce number of cards in hand
        4: 1107:      state->handCount[currentPlayer]--;
        -: 1108:    }
        -: 1109:	
        4: 1110:  return 0;
        -: 1111:}
        -: 1112:
function gainCard called 5 returned 100% blocks executed 80%
        5: 1113:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1114:{
        -: 1115:  //Note: supplyPos is enum of choosen card
        -: 1116:	
        -: 1117:  //check if supply pile is empty (0) or card is not used in game (-1)
        5: 1118:  if ( supplyCount(supplyPos, state) < 1 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -: 1119:    {
    #####: 1120:      return -1;
        -: 1121:    }
        -: 1122:	
        -: 1123:  //added card for [whoseTurn] current player:
        -: 1124:  // toFlag = 0 : add to discard
        -: 1125:  // toFlag = 1 : add to deck
        -: 1126:  // toFlag = 2 : add to hand
        -: 1127:
        5: 1128:  if (toFlag == 1)
branch  0 taken 20% (fallthrough)
branch  1 taken 80%
        -: 1129:    {
        1: 1130:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1131:      state->deckCount[player]++;
        -: 1132:    }
        4: 1133:  else if (toFlag == 2)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1134:    {
    #####: 1135:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1136:      state->handCount[player]++;
        -: 1137:    }
        -: 1138:  else
        -: 1139:    {
        4: 1140:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        4: 1141:      state->discardCount[player]++;
        -: 1142:    }
        -: 1143:	
        -: 1144:  //decrease number in supply pile
        5: 1145:  state->supplyCount[supplyPos]--;
        -: 1146:	 
        5: 1147:  return 0;
        -: 1148:}
        -: 1149:
function updateCoins called 18 returned 100% blocks executed 82%
       18: 1150:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1151:{
        -: 1152:  int i;
        -: 1153:	
        -: 1154:  //reset coin count
       18: 1155:  state->coins = 0;
        -: 1156:
        -: 1157:  //add coins for each Treasure card in player's hand
      114: 1158:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16% (fallthrough)
        -: 1159:    {
       96: 1160:      if (state->hand[player][i] == copper)
branch  0 taken 71% (fallthrough)
branch  1 taken 29%
        -: 1161:	{
       68: 1162:	  state->coins += 1;
        -: 1163:	}
       28: 1164:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1165:	{
    #####: 1166:	  state->coins += 2;
        -: 1167:	}
       28: 1168:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1169:	{
    #####: 1170:	  state->coins += 3;
        -: 1171:	}	
        -: 1172:    }	
        -: 1173:
        -: 1174:  //add bonus
       18: 1175:  state->coins += bonus;
        -: 1176:
       18: 1177:  return 0;
        -: 1178:}
        -: 1179:
        -: 1180:// Refactor
        -: 1181:
        -: 1182:// Smithy - draw +3 cards
function playSmithy called 2 returned 100% blocks executed 100%
        2: 1183:int playSmithy(int player, struct gameState *state) {
        -: 1184:  int i;
       10: 1185:  for (i = 0; i <= 3; i++) {
branch  0 taken 80%
branch  1 taken 20% (fallthrough)
        8: 1186:    drawCard(player, state);
call    0 returned 100%
        -: 1187:  }
        2: 1188:  return 0;
        -: 1189:}
        -: 1190:
        -: 1191:// Adventurer
function playAdventurer called 4 returned 100% blocks executed 93%
        4: 1192:int playAdventurer(int currentPlayer, struct gameState *state) {
        -: 1193:  int temphand[MAX_HAND];
        4: 1194:  int drawntreasure=0;
        -: 1195:  int cardDrawn;
        4: 1196:  int z = 0;// this is the counter for the temp hand
        -: 1197:
       22: 1198:  while(drawntreasure<3){
branch  0 taken 78%
branch  1 taken 22% (fallthrough)
       14: 1199:    if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####: 1200:      shuffle(currentPlayer, state);
call    0 never executed
        -: 1201:    }
       14: 1202:    drawCard(currentPlayer, state);
call    0 returned 100%
       14: 1203:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
       14: 1204:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 14% (fallthrough)
branch  1 taken 86%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
branch  4 taken 0% (fallthrough)
branch  5 taken 100%
       12: 1205:      drawntreasure++;
        -: 1206:    else{
        2: 1207:      temphand[z]=cardDrawn;
        2: 1208:      state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        2: 1209:      z++;
        -: 1210:    }
        -: 1211:  }
       10: 1212:  while(z-1>=0){
branch  0 taken 33%
branch  1 taken 67% (fallthrough)
        2: 1213:    state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        2: 1214:    z=z-1;
        -: 1215:  }
        4: 1216:  return 0;
        -: 1217:}
        -: 1218:
        -: 1219:// Baron
function playBaron called 2 returned 100% blocks executed 69%
        2: 1220:int playBaron(int currentPlayer, struct gameState *state, int choice1) {
        2: 1221:  state->numBuys++;//Increase buys by 1!
        2: 1222:  if (choice1 > 1) {//Boolean true or going to discard an estate
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        1: 1223:    int p = 0;//Iterator for hand!
        1: 1224:    int card_not_discarded = 1;//Flag for discard set!
        5: 1225:    while(card_not_discarded){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1226:      if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        1: 1227:        state->coins += 5;//Add 5 coins to the amount of coins
        1: 1228:        state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
        1: 1229:        state->discardCount[currentPlayer]++;
        4: 1230:        for (;p < state->handCount[currentPlayer]; p++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        3: 1231:          state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -: 1232:        }
        1: 1233:        state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
        1: 1234:        state->handCount[currentPlayer]--;
        1: 1235:        card_not_discarded = 0;//Exit the loop
        -: 1236:      }
        2: 1237:      else if (p > state->handCount[currentPlayer]){
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1238:        if(DEBUG) {
        -: 1239:          printf("No estate cards in your hand, invalid choice\n");
        -: 1240:          printf("Must gain an estate if there are any\n");
        -: 1241:        }
    #####: 1242:        if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1243:          gainCard(estate, state, 1, currentPlayer);
call    0 never executed
    #####: 1244:          state->supplyCount[estate]--;//Decrement estates
    #####: 1245:          if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1246:            isGameOver(state);
call    0 never executed
        -: 1247:          }
        -: 1248:        }
    #####: 1249:        card_not_discarded = 0;//Exit the loop
        -: 1250:      }
        -: 1251:            
        -: 1252:      else{
        2: 1253:        p++;//Next card
        -: 1254:      }
        -: 1255:    }
        -: 1256:  }        
        -: 1257:  else {
        1: 1258:    if (supplyCount(estate, state) > 0){
call    0 returned 100%
branch  1 taken 100% (fallthrough)
branch  2 taken 0%
        1: 1259:      gainCard(estate, state, 1, currentPlayer);//Gain an estate
call    0 returned 100%
        1: 1260:      state->supplyCount[estate]--;//Decrement Estates
        1: 1261:      if (supplyCount(estate, state) == 0){
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
    #####: 1262:        isGameOver(state);
call    0 never executed
        -: 1263:      }
        -: 1264:    }
        -: 1265:  }
        2: 1266:  return 0;
        -: 1267:}
        -: 1268:
        -: 1269:  
        -: 1270:// Mine
function playMine called 5 returned 100% blocks executed 90%
        5: 1271:int playMine(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1272:  int i;
        -: 1273:  int j;
        5: 1274:  j = state->hand[currentPlayer][choice1];  //store card we will trash
        5: 1275:  if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 20% (fallthrough)
branch  3 taken 80%
        1: 1276:    return -1;
        -: 1277:  }  
        4: 1278:  if (choice2 > treasure_map || choice2 < curse){
branch  0 taken 75% (fallthrough)
branch  1 taken 25%
branch  2 taken 33% (fallthrough)
branch  3 taken 67%
        2: 1279:    return -1;
        -: 1280:  }
        2: 1281:  if ( (getCost(state->hand[currentPlayer][choice1]) + 1) > getCost(choice2) ) {
call    0 returned 100%
call    1 returned 100%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
    #####: 1282:    return -1;
        -: 1283:  }
        -: 1284:
        2: 1285:  gainCard(choice2, state, 0, currentPlayer);
call    0 returned 100%
        -: 1286:
        -: 1287:  //discard card from hand
        2: 1288:  discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
        -: 1289:
        -: 1290:  //discard trashed card
        2: 1291:  for (i = 0; i < state->handCount[currentPlayer]; i++) {
branch  0 taken 100%
branch  1 taken 0% (fallthrough)
        2: 1292:    if (state->hand[currentPlayer][i] == j){
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        2: 1293:      discardCard(i, currentPlayer, state, 0);      
call    0 returned 100%
        2: 1294:      break;
        -: 1295:    }
        -: 1296:  }
        2: 1297:  return 0;
        -: 1298:}
        -: 1299:
        -: 1300:// Minion
function playMinion called 0 returned 0% blocks executed 0%
    #####: 1301:int playMinion(int currentPlayer, struct gameState *state, int choice1, int choice2, int handPos) {
        -: 1302:  int i;
        -: 1303:  int j;
        -: 1304:  //+1 action
    #####: 1305:  state->numActions++;
        -: 1306:      
        -: 1307:  //discard card from hand
    #####: 1308:  discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1309:      
    #####: 1310:  if (choice1) { //+4 coins
branch  0 never executed
branch  1 never executed
    #####: 1311:    state->coins = state->coins + 4;
        -: 1312:  }   
    #####: 1313:  else if (choice2) { //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1314:    //discard hand
    #####: 1315:    while(numHandCards(state) > 0) {
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####: 1316:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -: 1317:    }
        -: 1318:    //draw 5
    #####: 1319:    for (i = 0; i < 5; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1320:      drawCard(currentPlayer, state);
call    0 never executed
        -: 1321:    }
        -: 1322:        
        -: 1323:    //other players discard hand and redraw if hand size > 4
    #####: 1324:    for (i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####: 1325:      if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####: 1326:        if ( state->handCount[i] > 5 ) {
branch  0 never executed
branch  1 never executed
        -: 1327:          //discard hand
    #####: 1328:          while( state->handCount[i] > 0 ) {
branch  0 never executed
branch  1 never executed
    #####: 1329:            discardCard(handPos, i, state, 0);
call    0 never executed
        -: 1330:          }
        -: 1331:              
        -: 1332:          //draw 4
    #####: 1333:          for (j = 0; j < 4; j++) {
branch  0 never executed
branch  1 never executed
    #####: 1334:            drawCard(i, state);
call    0 never executed
        -: 1335:          }
        -: 1336:        }
        -: 1337:      }
        -: 1338:    }    
        -: 1339:  }
    #####: 1340:  return 0;
        -: 1341:}
        -: 1342:
        -: 1343://end of dominion.c
        -: 1344:
