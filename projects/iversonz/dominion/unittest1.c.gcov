        -:    0:Source:unittest1.c
        -:    0:Graph:unittest1.gcno
        -:    0:Data:unittest1.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include <stdio.h>
        -:    3:#include "rngs.h"
        -:    4:#include <stdlib.h>
        -:    5:
        -:    6:// gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c unittest1.c rngs.c -o unittest1 -lm -g
        -:    7:
        -:    8://ZDI assert is a function that receives a integer and a character.
        -:    9:// It checks if the integer is one or 2, if it is one that means the test Passed.
        -:   10:// If the integer is 2 it means the test failed
        -:   11:int zdi_assert(int a, char * string)
        -:   12:{
        2:   13:  if(a == 1)
        -:   14:  {
        2:   15:    printf("Test Passed: \t %s \n\n\n", string);
        2:   16:    return 0;
        -:   17:  }
    #####:   18:  else if( a == 2)
        -:   19:  {
    #####:   20:    printf("Test Failed: \t %s\n\n\n", string);
    #####:   21:  }
    #####:   22:  return 0;
        -:   23:
        2:   24:}
        -:   25:
        -:   26:
        -:   27:
        -:   28:int main()
        -:   29:{
        -:   30:  int a, b;
        2:   31:  int randomSeed = 10;
        -:   32://
        -:   33:  struct gameState game;
        -:   34:
        2:   35:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   36:
        2:   37:  printf("\n*****************************\n\nUnit Test 1\n\n");
        2:   38:  a = initializeGame(2,cards, randomSeed, &game); // intiliaze the game with 2 playes, 10 cards, a random seed of 10 and the struct game.
        -:   39:
        2:   40:  if(a == 0) // 0 means the test passed
        -:   41:  {
        2:   42:    b = zdi_assert(1, "Initializng Game");
        2:   43:  }
        -:   44:  else // otherwise the test failed
        -:   45:  {
    #####:   46:    b = zdi_assert(2, "Initializng Game");
        -:   47:  }
        -:   48:
        2:   49:  return 0;
        -:   50:}
