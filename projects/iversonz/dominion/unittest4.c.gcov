        -:    0:Source:unittest4.c
        -:    0:Graph:unittest4.gcno
        -:    0:Data:unittest4.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include <stdlib.h>
        -:    2:#include <stdio.h>
        -:    3:#include "assert.h"
        -:    4:#include "dominion.h"
        -:    5:#include "rngs.h"
        -:    6:#include <time.h>
        -:    7:
        -:    8:// gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c unittest4.c rngs.c -o unittest4 -lm -g
        -:    9:
        -:   10://ZDI assert is a function that receives a integer and a character.
        -:   11:// It checks if the integer is one or 2, if it is one that means the test Passed.
        -:   12:// If the integer is 2 it means the test failed
        -:   13:int zdi_assert(int a, char * string)
        -:   14:{
        2:   15:  if(a == 1)
        -:   16:  {
        2:   17:    printf("Test Passed: \t %s \n\n", string);
        2:   18:    return 0;
        -:   19:  }
    #####:   20:  else if( a == 2)
        -:   21:  {
    #####:   22:    printf("Test Failed: \t %s\n\n", string);
    #####:   23:  }
    #####:   24:  return 0;
        -:   25:
        2:   26:}
        -:   27:
        -:   28://Testing the shuffle function
        -:   29:int main()
        -:   30:{
        -:   31:  int a, b;
        2:   32:  int randomSeed = 10;
        -:   33:
        -:   34:  struct gameState game;
        -:   35:
        2:   36:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   37:
        2:   38:  printf("Unit Test 4\n\n");
        2:   39:  a = initializeGame(2,cards, randomSeed, &game);
        -:   40:
        2:   41:  b = shuffle(1, &game); // shuffle player one hand
        -:   42:
        2:   43:  if(b == 0) // 0 means the shuffe correction worked correctly
        -:   44:  {
        2:   45:    zdi_assert(1,"Shuffle Hand");
        2:   46:  }
        -:   47:  else // shuffle function did not pass tes
        -:   48:  {
    #####:   49:    zdi_assert(2, "Shuffle Handd");
        -:   50:  }
        -:   51:
        -:   52:
        2:   53:}
