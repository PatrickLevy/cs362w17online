        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Automated Random Test for the Adventure card
        -:    2:// Compile --  gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestadventurer.c rngs.c -o randomtestadventurer -lm -g
        -:    3:
        -:    4:#include "dominion.h"
        -:    5:#include "rngs.h"
        -:    6:#include <stdio.h>
        -:    7:#include <math.h>
        -:    8:#include <stdlib.h>
        -:    9:
        -:   10:///////// Global Variable /////////
        -:   11:int test_passed = 0;
        -:   12:////////////////////////////////
        -:   13:
        -:   14:
        -:   15:void check_results(int a)
        -:   16:{
     1000:   17:  if(a == 0)
        -:   18:  {
     1000:   19:    test_passed++;
     1000:   20:  }
        -:   21:
     1000:   22:}
        -:   23:
        -:   24:
        -:   25:int main()
        -:   26:{
        -:   27:  int a, b, playersn, randomSeed, value, countDeck, countHand;
        1:   28:  int currentplayer = 1;
        -:   29:  struct gameState game;
        -:   30:
        1:   31:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   32:
        1:   33:  printf("\nAutomated Random Test -- ADVENTURER\n-----------\nThere are 10 rounds of testing...\nEach round has 100 random tests...\n");
        -:   34:
        -:   35:
       22:   36:  for(int z = 0; z < 10 ; z++)
        -:   37:  {
       10:   38:    printf("Testing Round %d\n", (z+1));
     2020:   39:    for(int i = 0; i < 100; i ++)
        -:   40:    {
     1000:   41:      playersn = rand() % 4; // Randon Number of players
     1000:   42:      randomSeed = rand() % 10000; // Randon Seed
        -:   43:
     1000:   44:      a = initializeGame(playersn,cards, randomSeed, &game); // Initiliaze the game
        -:   45:
        -:   46:
     1000:   47:      value = rand() % 6; // set a value random
        -:   48:
     1000:   49:      if(value == 1) // if the value is 1 set the deckCount to 0
        -:   50:      {
      154:   51:        game.deckCount[currentplayer] = 0;
      154:   52:        countDeck = 0 ;
      154:   53:      }
        -:   54:      else // otherwise pick a random value
        -:   55:      {
      846:   56:        countDeck = rand() % MAX_DECK;
      846:   57:        game.deckCount[currentplayer] = countDeck;
        -:   58:      }
        -:   59:
     1000:   60:      countHand = rand() % MAX_HAND;
     1000:   61:      game.handCount[currentplayer] = countHand;
        -:   62:
        -:   63:
     1000:   64:      game.discardCount[currentplayer] = rand() % MAX_DECK;
        -:   65:
     1000:   66:      b = cardEffect(adventurer, 1, 1, 1, &game);
        -:   67:
     1000:   68:      check_results(b);
        -:   69:
     1000:   70:    }
        -:   71:
       10:   72:  }
        1:   73:  printf("\nResults\n----------\n");
        1:   74:  printf("Test's Passed: %d\n",test_passed );
        1:   75:  printf("Test's Failed: %d\n",(1000 - test_passed) );
        1:   76:  printf("Total Number of Test's: %d\n",1000 );
        -:   77:
        -:   78:
        1:   79:}
