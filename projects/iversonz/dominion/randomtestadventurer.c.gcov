        -:    0:Source:randomtestadventurer.c
        -:    0:Graph:randomtestadventurer.gcno
        -:    0:Data:randomtestadventurer.gcda
        -:    0:Runs:4
        -:    0:Programs:1
        -:    1://Automated Random Test for the Adventure card
        -:    2:// Compile --  gcc -fprofile-arcs -ftest-coverage -Wall -std=c99 dominion.c randomtestadventurer.c rngs.c -o randomtestadventurer -lm -g
        -:    3:// find . -name "*.gcda" -print0 | xargs -0 rm
        -:    4:// ./randomtestadventurer
        -:    5:// gcov randomtestadventurer
        -:    6:#include "dominion.h"
        -:    7:#include "rngs.h"
        -:    8:#include <stdio.h>
        -:    9:#include <math.h>
        -:   10:#include <stdlib.h>
        -:   11:
        -:   12:///////// Global Variable /////////
        -:   13:int test_passed = 0;
        -:   14:////////////////////////////////
        -:   15:
        -:   16:
        -:   17:void check_results(int a)
        -:   18:{
     4000:   19:  if(a == 0)
        -:   20:  {
     4000:   21:    test_passed++;
     4000:   22:  }
        -:   23:
     4000:   24:}
        -:   25:
        -:   26:
        -:   27:int main()
        -:   28:{
        -:   29:  int a, b, playersn, randomSeed, value, countDeck, countHand;
        4:   30:  int currentplayer = 1;
        -:   31:  struct gameState game;
        -:   32:
        4:   33:  int cards[10] = {adventurer, gardens, embargo, village, minion, mine, cutpurse, sea_hag, tribute, smithy};
        -:   34:
        4:   35:  printf("\nAutomated Random Test -- ADVENTURER\n-----------\nThere are 10 rounds of testing...\nEach round has 100 random tests...\n");
        -:   36:
        -:   37:
       88:   38:  for(int z = 0; z < 10 ; z++)
        -:   39:  {
       40:   40:    printf("Testing Round %d\n", (z+1));
     8080:   41:    for(int i = 0; i < 100; i ++)
        -:   42:    {
     4000:   43:      playersn = rand() % 4; // Randon Number of players
     4000:   44:      randomSeed = rand() % 10000; // Randon Seed
        -:   45:
     4000:   46:      a = initializeGame(playersn,cards, randomSeed, &game); // Initiliaze the game
        -:   47:
        -:   48:
     4000:   49:      value = rand() % 6; // set a value random
        -:   50:
     4000:   51:      if(value == 1) // if the value is 1 set the deckCount to 0
        -:   52:      {
      616:   53:        game.deckCount[currentplayer] = 0;
      616:   54:        countDeck = 0 ;
      616:   55:      }
        -:   56:      else // otherwise pick a random value
        -:   57:      {
     3384:   58:        countDeck = rand() % MAX_DECK;
     3384:   59:        game.deckCount[currentplayer] = countDeck;
        -:   60:      }
        -:   61:
     4000:   62:      countHand = rand() % MAX_HAND;
     4000:   63:      game.handCount[currentplayer] = countHand;
        -:   64:
        -:   65:
     4000:   66:      game.discardCount[currentplayer] = rand() % MAX_DECK;
        -:   67:
     4000:   68:      b = cardEffect(adventurer, 1, 1, 1, &game);
        -:   69:
     4000:   70:      check_results(b);
        -:   71:
     4000:   72:    }
        -:   73:
       40:   74:  }
        4:   75:  printf("\nResults\n----------\n");
        4:   76:  printf("Test's Passed: %d\n",test_passed );
        4:   77:  printf("Test's Failed: %d\n",(1000 - test_passed) );
        4:   78:  printf("Total Number of Test's: %d\n",1000 );
        -:   79:
        -:   80:
        4:   81:}
