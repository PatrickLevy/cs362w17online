TESTING scoreFor function!

Cards in hand for player 1: 5
Cards in hand for player 2: 0
Cards in discard pile for player 1: 0
Cards in discard pile for player 2: 0
Cards in deck for player 1: 5
Cards in deck for player 2: 10
Score should be equal at the start of the game,
as each player has 3 Estate Cards for a total of 3 VPs
Player 1's score is 2. - FAIL (should be 3)
Player 2's score is 0. - FAIL (should be 3)
Ending turn. Score will be recalculated and it
should still be the same as no new cards have been drawn.
Player 2's score is 2. - FAIL (should be 3)
Player 1's score is 3. - FAIL (should be 3)
testscoreFor fails miserably.

TESTING endTurn function!

Player 1 has 5 cards in hand.
After endTurn, it should be player 2's turn
Current Player is player 2. - PASS
After endTurn player 1 should have 0 cards in hand, 5 in discard 
and player 2 should have 5 cards in hand, 0 in discard.
Player 1 has 0 cards in hand. - PASS
Player 1 has 5 cards in deck. - PASS
Player 1 has 5 cards in discard. - PASS
Player 2 has 5 cards in hand. - PASS
Player 2 has 5 cards in deck. - PASS
Player 2 has 0 cards in discard. - PASS
endTurn passes.

TESTING supplyCount function!

If 2 players are playing, supply count for Estate, Duchy, and Province cards
should be 8 for each card.
Supply count for Estate is: 8 - PASS
Supply count for Duchy is: 8 - PASS
Supply count for Province is: 8 - PASS
If 3 players are playing, supply count for Estate, Duchy, and Province cards
should be 12 for each card.
Supply count for Estate is: 12 - PASS
Supply count for Duchy is: 12 - PASS
Supply count for Province is: 12 - PASS
If 2 players are playing, supply count for Curse cards should be 10.
Supply count for Curse is: 10 - PASS
If 3 players are playing, supply count for Curse cards should be 20.
Supply count for Curse is: 20 - PASS
If 4 players are playing, supply count for Curse cards should be 30.
Supply count for Curse is: 30 - PASS
testSupplyCount passes.

TESTING gameOver function!

2 supply piles at 0 and all other at 3,
game should not be over
Game not over - PASS

3 supply piles at 0 and all other at 3,
game should be over
Game over - PASS

0 Province Cards left and all other at 3,
game should be over
Game over - PASS

testGameOver passes.

TESTING Smithy card!

Playing smithy for player 1. Should add 3 cards to his hand from the deck
Cards in hand for player 1, before playing smithy: 5
Cards in discard pile for player 1, before playing smithy: 0
Cards in deck for player 1, before playing smithy: 5
Getting one free smithy for player 1
After playing smithy, player 1 should have + 3 cards in hand 
because smithy was added for free.
Played cards: 1 - PASS
Cards in hand for player 1: 10 - FAIL (should be 8)
Cards in deck for player 1: 0 - FAIL (should be 2)
After endTurn, discard pile should be 11 because smithy was gained for free
Cards in discard pile for player 1: 10 - FAIL (should be 11)
testSmithy fails miserably.

TESTING Adventurer card!

Playing adventurer for player 1. Should add 2 treasure cards
to his hand from the deck and discard the other revealed cards
Coins available for player 1, before playing Adventurer: 3
Cards in hand for player 1, before playing Adventurer: 5
Cards in discard pile for player 1, before playing Adventurer: 0
Cards in deck for player 1, before playing Adventurer: 5
Getting one free Adventurer for player 1
After playing Adventurer, player 1 should have + 2 treasure cards
in hand because Adventurer was added for free and
played card should be set to 1.
Coins available for player 1: 4 - FAIL (should be 5)
Played cards: 0 - FAIL (should be 1)
Cards in hand for player 1: 7 - PASS
Cards in deck for player 1: 4 - FAIL (should be 3)
testAdventurer fails miserably.

TESTING Village card!

Playing Village for player 1. Should add 1 card to his hand from the deck and 2 actions
Number of actions for player 1, before playing Village: 1
Cards in hand for player 1, before playing Village: 5
Cards in discard pile for player 1, before playing Village: 0
Cards in deck for player 1, before playing Village: 5
Getting one free Village for player 1
After playing Village, player 1 should have + 1 card in hand 
and 2 more actions.
Number of actions for player 1: 2 - PASS
Played cards: 1 - PASS
Cards in hand for player 1: 7 - FAIL (should be 6)
Cards in deck for player 1: 3 - FAIL (should be 4)
testVillage fails miserably.

TESTING Gardens card!

Playing Gardens card for player 1. Should be worth 1 VP per 10 cards
should add 1 VP to total VPs
Player 1 score before having a Gardens: 2
Getting one free Gardens card for player 1
After having a Gardens, player 1 
should have + 1 VP for each 10 cards.
Cards in hand for player 1: 6 - PASS
Cards in deck for player 1: 5 - PASS
Player 1 score: 2 - FAIL (should be 4)
Adding 3 Estates and 7 Duchys to player 1's hand, should then have +25 VPs 
since 3 Estates and 7 Duchys are added and player has a Gardens
Cards in hand for player 1: 16 - PASS
Player 1 score: 26 - FAIL (should be 29)
testGardens fails miserably.

File 'dominion.c'
Lines executed:38.66% of 657
Branches executed:41.71% of 422
Taken at least once:31.28% of 422
No calls
dominion.c:creating 'dominion.c.gcov'

        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:10
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8://Refactored smithy code
function runSmithy called 1 returned 100% blocks executed 100%
        -:    9:void runSmithy(int currentPlayer, struct gameState *state) {
        -:   10:    //+3 Cards
       12:   11:    for (int i = 0; i < 5; i++)//*
branch  0 taken 83%
branch  1 taken 17%
        -:   12:    {
        5:   13:        drawCard(currentPlayer, state);
        5:   14:    }
        1:   15:};
        -:   16:
        -:   17://Refactored adventurer code
function runAdventurer called 1 returned 100% blocks executed 66%
        -:   18:void runAdventurer (struct gameState *state, int currentPlayer) {
        1:   19:    int drawntreasure=1;//*
        -:   20:    int cardDrawn;
        -:   21:    int temphand[MAX_HAND];
        1:   22:    int z = 0;
        -:   23:    
        4:   24:    while(drawntreasure<2){
branch  0 taken 50%
branch  1 taken 50%
        1:   25:        if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 0%
branch  1 taken 100%
    #####:   26:            shuffle(currentPlayer, state);
    #####:   27:        }
        1:   28:        drawCard(currentPlayer, state);
        1:   29:        cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        1:   30:        if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
branch  0 taken 0%
branch  1 taken 100%
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        1:   31:            drawntreasure++;
        -:   32:        else{
    #####:   33:            temphand[z]=cardDrawn;
    #####:   34:            state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
    #####:   35:            z++;
        -:   36:        }
        -:   37:    }
        2:   38:    while(z-1>=0){
branch  0 taken 0%
branch  1 taken 100%
    #####:   39:        state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
    #####:   40:        z=z-1;
        -:   41:    }
        -:   42:    
        1:   43:};
        -:   44:
        -:   45://Refactored village code
function runVillage called 1 returned 100% blocks executed 100%
        -:   46:void runVillage (struct gameState *state, int currentPlayer) {
        -:   47:    
        -:   48:    //+1 Card
        1:   49:    drawCard(currentPlayer, state);
        1:   50:    drawCard(currentPlayer, state);//*
        -:   51:    
        -:   52:    
        -:   53:    //+2 Actions
        1:   54:    state->numActions = state->numActions + 2;
        1:   55:};
        -:   56:
        -:   57://Refactored mine code
function runMine called 0 returned 0% blocks executed 0%
        -:   58:int runMine (struct gameState *state, int currentPlayer, int choice1, int choice2, int handPos) {
        -:   59:    int j;
    #####:   60:    j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:   61:    
    #####:   62:    if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   63:    {
    #####:   64:        return -1;
        -:   65:    }
        -:   66:    
    #####:   67:    if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:   68:    {
    #####:   69:        return -1;
        -:   70:    }
        -:   71:    
    #####:   72:    if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )//*
branch  0 never executed
branch  1 never executed
        -:   73:    {
    #####:   74:        return -1;
        -:   75:    }
        -:   76:    
    #####:   77:    gainCard(choice2, state, 2, currentPlayer);
        -:   78:    
        -:   79:    //discard card from hand
    #####:   80:    discardCard(handPos, currentPlayer, state, 0);
        -:   81:    
        -:   82:    //discard trashed card
    #####:   83:    for (int i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:        if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:   86:        {
    #####:   87:            discardCard(i, currentPlayer, state, 0);
    #####:   88:            break;
        -:   89:        }
    #####:   90:    }
    #####:   91:    return 0;
    #####:   92:};
        -:   93:
        -:   94://Refactored cutpurse code
function runCutPurse called 0 returned 0% blocks executed 0%
        -:   95:void runCutPurse (struct gameState *state, int currentPlayer) {
    #####:   96:    updateCoins(currentPlayer, state, 5);//*
    #####:   97:    for (int i = 0; i < state->numPlayers; i++) {
branch  0 never executed
branch  1 never executed
    #####:   98:        if (i != currentPlayer) {
branch  0 never executed
branch  1 never executed
    #####:   99:            for (int j = 0; j < state->handCount[i]; j++) {
branch  0 never executed
branch  1 never executed
    #####:  100:                if (state->hand[i][j] == copper) {
branch  0 never executed
branch  1 never executed
    #####:  101:                    discardCard(j, i, state, 0);
    #####:  102:                    break;
        -:  103:                }
    #####:  104:                if (j == state->handCount[i]) {
branch  0 never executed
branch  1 never executed
    #####:  105:                    for (int k = 0; k < state->handCount[i]; k++) {
branch  0 never executed
branch  1 never executed
        -:  106:                        if (DEBUG) {
        -:  107:                            printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -:  108:                        }
    #####:  109:                    }
    #####:  110:                    break;
        -:  111:                }
    #####:  112:            }
    #####:  113:        }
    #####:  114:    }
    #####:  115:};
        -:  116:
function compare called 588 returned 100% blocks executed 85%
        -:  117:int compare(const void* a, const void* b) {
      588:  118:    if (*(int*)a > *(int*)b)
branch  0 taken 0%
branch  1 taken 100%
    #####:  119:        return 1;
      588:  120:    if (*(int*)a < *(int*)b)
branch  0 taken 36%
branch  1 taken 64%
      210:  121:        return -1;
      378:  122:    return 0;
      588:  123:}
        -:  124:
function newGame called 0 returned 0% blocks executed 0%
        -:  125:struct gameState* newGame() {
    #####:  126:    struct gameState* g = malloc(sizeof(struct gameState));
    #####:  127:    return g;
        -:  128:}
        -:  129:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:  130:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:  131:                  int k8, int k9, int k10) {
    #####:  132:    int* k = malloc(10 * sizeof(int));
    #####:  133:    k[0] = k1;
    #####:  134:    k[1] = k2;
    #####:  135:    k[2] = k3;
    #####:  136:    k[3] = k4;
    #####:  137:    k[4] = k5;
    #####:  138:    k[5] = k6;
    #####:  139:    k[6] = k7;
    #####:  140:    k[7] = k8;
    #####:  141:    k[8] = k9;
    #####:  142:    k[9] = k10;
    #####:  143:    return k;
        -:  144:}
        -:  145:
function initializeGame called 17 returned 100% blocks executed 95%
        -:  146:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:  147:                   struct gameState *state) {
        -:  148:    
        -:  149:    int i;
        -:  150:    int j;
        -:  151:    int it;
        -:  152:    //set up random number generator
       17:  153:    SelectStream(1);
       17:  154:    PutSeed((long)randomSeed);
        -:  155:    
        -:  156:    //check number of players
       34:  157:    if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  158:    {
    #####:  159:        return -1;
        -:  160:    }
        -:  161:    
        -:  162:    //set number of players
       17:  163:    state->numPlayers = numPlayers;
        -:  164:    
        -:  165:    //check selected kingdom cards are different
      374:  166:    for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9%
        -:  167:    {
     3740:  168:        for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9%
        -:  169:        {
     3230:  170:            if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90%
branch  1 taken 10%
branch  2 taken 0%
branch  3 taken 100%
        -:  171:            {
    #####:  172:                return -1;
        -:  173:            }
     1700:  174:        }
      170:  175:    }
        -:  176:    
        -:  177:    
        -:  178:    //initialize supply
        -:  179:    ///////////////////////////////
        -:  180:    
        -:  181:    //set number of Curse cards
       17:  182:    if (numPlayers == 2)
branch  0 taken 65%
branch  1 taken 35%
        -:  183:    {
       11:  184:        state->supplyCount[curse] = 10;
       11:  185:    }
        6:  186:    else if (numPlayers == 3)
branch  0 taken 67%
branch  1 taken 33%
        -:  187:    {
        4:  188:        state->supplyCount[curse] = 20;
        4:  189:    }
        -:  190:    else
        -:  191:    {
        2:  192:        state->supplyCount[curse] = 30;
        -:  193:    }
        -:  194:    
        -:  195:    //set number of Victory cards
       17:  196:    if (numPlayers == 2)
branch  0 taken 65%
branch  1 taken 35%
        -:  197:    {
       11:  198:        state->supplyCount[estate] = 8;
       11:  199:        state->supplyCount[duchy] = 8;
       11:  200:        state->supplyCount[province] = 8;
       11:  201:    }
        -:  202:    else
        -:  203:    {
        6:  204:        state->supplyCount[estate] = 12;
        6:  205:        state->supplyCount[duchy] = 12;
        6:  206:        state->supplyCount[province] = 12;
        -:  207:    }
        -:  208:    
        -:  209:    //set number of Treasure cards
       17:  210:    state->supplyCount[copper] = 60 - (7 * numPlayers);
       17:  211:    state->supplyCount[silver] = 40;
       17:  212:    state->supplyCount[gold] = 30;
        -:  213:    
        -:  214:    //set number of Kingdom cards
      714:  215:    for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5%
        -:  216:    {
     5610:  217:        for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6%
        -:  218:        {
     2635:  219:            if (kingdomCards[j] == i)
branch  0 taken 6%
branch  1 taken 94%
        -:  220:            {
        -:  221:                //check if card is a 'Victory' Kingdom card
      340:  222:                if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 10%
branch  3 taken 90%
        -:  223:                {
       17:  224:                    if (numPlayers == 2){
branch  0 taken 65%
branch  1 taken 35%
       11:  225:                        state->supplyCount[i] = 8;
       11:  226:                    }
        6:  227:                    else{ state->supplyCount[i] = 12; }
       17:  228:                }
        -:  229:                else
        -:  230:                {
      153:  231:                    state->supplyCount[i] = 10;
        -:  232:                }
      170:  233:                break;
        -:  234:            }
        -:  235:            else    //card is not in the set choosen for the game
        -:  236:            {
     2465:  237:                state->supplyCount[i] = -1;
        -:  238:            }
     2465:  239:        }
        -:  240:        
      340:  241:    }
        -:  242:    
        -:  243:    ////////////////////////
        -:  244:    //supply intilization complete
        -:  245:    
        -:  246:    //set player decks
      118:  247:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  248:    {
       42:  249:        state->deckCount[i] = 0;
      336:  250:        for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25%
        -:  251:        {
      126:  252:            state->deck[i][j] = estate;
      126:  253:            state->deckCount[i]++;
      126:  254:        }
      672:  255:        for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13%
        -:  256:        {
      294:  257:            state->deck[i][j] = copper;
      294:  258:            state->deckCount[i]++;
      294:  259:        }
       42:  260:    }
        -:  261:    
        -:  262:    //shuffle player decks
      118:  263:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  264:    {
       42:  265:        if ( shuffle(i, state) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  266:        {
    #####:  267:            return -1;
        -:  268:        }
       42:  269:    }
        -:  270:    
        -:  271:    //draw player hands
      118:  272:    for (i = 0; i < numPlayers; i++)
branch  0 taken 71%
branch  1 taken 29%
        -:  273:    {
        -:  274:        //initialize hand size to zero
       42:  275:        state->handCount[i] = 0;
       42:  276:        state->discardCount[i] = 0;
        -:  277:        //draw 5 cards
        -:  278:        // for (j = 0; j < 5; j++)
        -:  279:        //	{
        -:  280:        //	  drawCard(i, state);
        -:  281:        //	}
       42:  282:    }
        -:  283:    
        -:  284:    //set embargo tokens to 0 for all supply piles
      952:  285:    for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  286:    {
      459:  287:        state->embargoTokens[i] = 0;
      459:  288:    }
        -:  289:    
        -:  290:    //initialize first player's turn
       17:  291:    state->outpostPlayed = 0;
       17:  292:    state->phase = 0;
       17:  293:    state->numActions = 1;
       17:  294:    state->numBuys = 1;
       17:  295:    state->playedCardCount = 0;
       17:  296:    state->whoseTurn = 0;
       17:  297:    state->handCount[state->whoseTurn] = 0;
        -:  298:    //int it; move to top
        -:  299:    
        -:  300:    //Moved draw cards to here, only drawing at the start of a turn
      204:  301:    for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17%
       85:  302:        drawCard(state->whoseTurn, state);
       85:  303:    }
        -:  304:    
       17:  305:    updateCoins(state->whoseTurn, state, 0);
        -:  306:    
       17:  307:    return 0;
       17:  308:}
        -:  309:
function shuffle called 42 returned 100% blocks executed 93%
        -:  310:int shuffle(int player, struct gameState *state) {
        -:  311:    
        -:  312:    
        -:  313:    int newDeck[MAX_DECK];
       42:  314:    int newDeckPos = 0;
        -:  315:    int card;
        -:  316:    int i;
        -:  317:    
       42:  318:    if (state->deckCount[player] < 1)
branch  0 taken 0%
branch  1 taken 100%
    #####:  319:        return -1;
       42:  320:    qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  321:    /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  322:    
      924:  323:    while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9%
      420:  324:        card = floor(Random() * state->deckCount[player]);
      420:  325:        newDeck[newDeckPos] = state->deck[player][card];
      420:  326:        newDeckPos++;
     3136:  327:        for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 73%
branch  1 taken 27%
     1148:  328:            state->deck[player][i] = state->deck[player][i+1];
     1148:  329:        }
      420:  330:        state->deckCount[player]--;
        -:  331:    }
      924:  332:    for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9%
      420:  333:        state->deck[player][i] = newDeck[i];
      420:  334:        state->deckCount[player]++;
      420:  335:    }
        -:  336:    
       42:  337:    return 0;
       42:  338:}
        -:  339:
function playCard called 3 returned 100% blocks executed 66%
        -:  340:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state)
        -:  341:{
        -:  342:    int card;
        3:  343:    int coin_bonus = 0; 		//tracks coins gain from actions
        -:  344:    
        -:  345:    //check if it is the right phase
        3:  346:    if (state->phase != 0)
branch  0 taken 0%
branch  1 taken 100%
        -:  347:    {
    #####:  348:        return -1;
        -:  349:    }
        -:  350:    
        -:  351:    //check if player has enough actions
        3:  352:    if ( state->numActions < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -:  353:    {
    #####:  354:        return -1;
        -:  355:    }
        -:  356:    
        -:  357:    //get card played
        3:  358:    card = handCard(handPos, state);
        -:  359:    
        -:  360:    //check if selected card is an action
        6:  361:    if ( card < adventurer || card > treasure_map )
branch  0 taken 100%
branch  1 taken 0%
branch  2 taken 0%
branch  3 taken 100%
        -:  362:    {
    #####:  363:        return -1;
        -:  364:    }
        -:  365:    
        -:  366:    //play card
        3:  367:    if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
branch  0 taken 0%
branch  1 taken 100%
        -:  368:    {
    #####:  369:        return -1;
        -:  370:    }
        -:  371:    
        -:  372:    //reduce number of actions
        3:  373:    state->numActions--;
        -:  374:    
        -:  375:    //update coins (Treasure cards may be added with card draws)
        3:  376:    updateCoins(state->whoseTurn, state, coin_bonus);
        -:  377:    
        3:  378:    return 0;
        3:  379:}
        -:  380:
function buyCard called 0 returned 0% blocks executed 0%
        -:  381:int buyCard(int supplyPos, struct gameState *state) {
        -:  382:    int who;
        -:  383:    if (DEBUG){
        -:  384:        printf("Entering buyCard...\n");
        -:  385:    }
        -:  386:    
        -:  387:    // I don't know what to do about the phase thing.
        -:  388:    
    #####:  389:    who = state->whoseTurn;
        -:  390:    
    #####:  391:    if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  392:        if (DEBUG)
        -:  393:            printf("You do not have any buys left\n");
    #####:  394:        return -1;
    #####:  395:    } else if (supplyCount(supplyPos, state) <1){
branch  0 never executed
branch  1 never executed
        -:  396:        if (DEBUG)
        -:  397:            printf("There are not any of that type of card left\n");
    #####:  398:        return -1;
    #####:  399:    } else if (state->coins < getCost(supplyPos)){
branch  0 never executed
branch  1 never executed
        -:  400:        if (DEBUG)
        -:  401:            printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  402:        return -1;
        -:  403:    } else {
    #####:  404:        state->phase=1;
        -:  405:        //state->supplyCount[supplyPos]--;
    #####:  406:        gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  407:        
    #####:  408:        state->coins = (state->coins) - (getCost(supplyPos));
    #####:  409:        state->numBuys--;
        -:  410:        if (DEBUG)
        -:  411:            printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  412:    }
        -:  413:    
        -:  414:    //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  415:    //state->discardCount[who]++;
        -:  416:    
    #####:  417:    return 0;
    #####:  418:}
        -:  419:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  420:int numHandCards(struct gameState *state) {
    #####:  421:    return state->handCount[ whoseTurn(state) ];
        -:  422:}
        -:  423:
function handCard called 3 returned 100% blocks executed 100%
        -:  424:int handCard(int handPos, struct gameState *state) {
        3:  425:    int currentPlayer = whoseTurn(state);
        3:  426:    return state->hand[currentPlayer][handPos];
        -:  427:}
        -:  428:
function supplyCount called 32 returned 100% blocks executed 100%
        -:  429:int supplyCount(int card, struct gameState *state) {
       32:  430:    return state->supplyCount[card];
        -:  431:}
        -:  432:
function fullDeckCount called 4 returned 100% blocks executed 70%
        -:  433:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  434:    int i;
        4:  435:    int count = 0;
        -:  436:    
       48:  437:    for (i = 0; i < state->deckCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17%
        -:  438:    {
       20:  439:        if (state->deck[player][i] == card) count++;
branch  0 taken 0%
branch  1 taken 100%
       20:  440:    }
        -:  441:    
       96:  442:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 92%
branch  1 taken 8%
        -:  443:    {
       44:  444:        if (state->hand[player][i] == card) count++;
branch  0 taken 0%
branch  1 taken 100%
       44:  445:    }
        -:  446:    
        8:  447:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 0%
branch  1 taken 100%
        -:  448:    {
    #####:  449:        if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
    #####:  450:    }
        -:  451:    
        4:  452:    return count;
        -:  453:}
        -:  454:
function whoseTurn called 20 returned 100% blocks executed 100%
        -:  455:int whoseTurn(struct gameState *state) {
       20:  456:    return state->whoseTurn;
        -:  457:}
        -:  458:
function endTurn called 4 returned 100% blocks executed 92%
        -:  459:int endTurn(struct gameState *state) {
        -:  460:    int k;
        -:  461:    int i;
        4:  462:    int currentPlayer = whoseTurn(state);
        -:  463:    
        -:  464:    //Discard hand
       58:  465:    for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 taken 86%
branch  1 taken 14%
       25:  466:        state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
       25:  467:        state->hand[currentPlayer][i] = -1;//Set card to -1
       25:  468:    }
        4:  469:    state->handCount[currentPlayer] = 0;//Reset hand count
        -:  470:    
        -:  471:    //Code for determining the player
        4:  472:    if (currentPlayer < (state->numPlayers - 1)){
branch  0 taken 100%
branch  1 taken 0%
        4:  473:        state->whoseTurn = currentPlayer + 1;//Still safe to increment
        4:  474:    }
        -:  475:    else{
    #####:  476:        state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  477:    }
        -:  478:    
        4:  479:    state->outpostPlayed = 0;
        4:  480:    state->phase = 0;
        4:  481:    state->numActions = 1;
        4:  482:    state->coins = 0;
        4:  483:    state->numBuys = 1;
        4:  484:    state->playedCardCount = 0;
        4:  485:    state->handCount[state->whoseTurn] = 0;
        -:  486:    
        -:  487:    //int k; move to top
        -:  488:    //Next player draws hand
       48:  489:    for (k = 0; k < 5; k++){
branch  0 taken 83%
branch  1 taken 17%
       20:  490:        drawCard(state->whoseTurn, state);//Draw a card
       20:  491:    }
        -:  492:    
        -:  493:    //Update money
        4:  494:    updateCoins(state->whoseTurn, state , 0);
        -:  495:    
        4:  496:    return 0;
        -:  497:}
        -:  498:
function isGameOver called 3 returned 100% blocks executed 100%
        -:  499:int isGameOver(struct gameState *state) {
        -:  500:    int i;
        -:  501:    int j;
        -:  502:    
        -:  503:    //if stack of Province cards is empty, the game ends
        3:  504:    if (state->supplyCount[province] == 0)
branch  0 taken 33%
branch  1 taken 67%
        -:  505:    {
        1:  506:        return 1;
        -:  507:    }
        -:  508:    
        -:  509:    //if three supply pile are at 0, the game ends
        2:  510:    j = 0;
      104:  511:    for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4%
        -:  512:    {
       50:  513:        if (state->supplyCount[i] == 0)
branch  0 taken 10%
branch  1 taken 90%
        -:  514:        {
        5:  515:            j++;
        5:  516:        }
       50:  517:    }
        2:  518:    if ( j >= 3)
branch  0 taken 50%
branch  1 taken 50%
        -:  519:    {
        1:  520:        return 1;
        -:  521:    }
        -:  522:    
        1:  523:    return 0;
        3:  524:}
        -:  525:
function scoreFor called 9 returned 100% blocks executed 74%
        -:  526:int scoreFor (int player, struct gameState *state) {
        -:  527:    
        -:  528:    int i;
        9:  529:    int score = 0;
        -:  530:    //score from hand
      136:  531:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 87%
branch  1 taken 13%
        -:  532:    {
       59:  533:        if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
       79:  534:        if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 taken 34%
branch  1 taken 66%
       73:  535:        if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 taken 24%
branch  1 taken 76%
       59:  536:        if (state->hand[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
       59:  537:        if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
       63:  538:        if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 7%
branch  1 taken 93%
       59:  539:    }
        -:  540:    
        -:  541:    //score from discard
       28:  542:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 36%
branch  1 taken 64%
        -:  543:    {
        5:  544:        if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        7:  545:        if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 taken 40%
branch  1 taken 60%
        5:  546:        if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        5:  547:        if (state->discard[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
        5:  548:        if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        5:  549:        if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        5:  550:    }
        -:  551:    
        -:  552:    //score from deck
       28:  553:    for (i = 0; i < state->discardCount[player]; i++)
branch  0 taken 36%
branch  1 taken 64%
        -:  554:    {
        5:  555:        if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 taken 0%
branch  1 taken 100%
        6:  556:        if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 taken 20%
branch  1 taken 80%
        5:  557:        if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 taken 0%
branch  1 taken 100%
        5:  558:        if (state->deck[player][i] == province) { score = score + 6; };
branch  0 taken 0%
branch  1 taken 100%
        5:  559:        if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 taken 0%
branch  1 taken 100%
        5:  560:        if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 taken 0%
branch  1 taken 100%
        5:  561:    }
        -:  562:    
        9:  563:    return score;
        -:  564:}
        -:  565:
function getWinners called 0 returned 0% blocks executed 0%
        -:  566:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  567:    int i;
        -:  568:    int j;
        -:  569:    int highScore;
        -:  570:    int currentPlayer;
        -:  571:    
        -:  572:    //get score for each player
    #####:  573:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  574:    {
        -:  575:        //set unused player scores to -9999
    #####:  576:        if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  577:        {
    #####:  578:            players[i] = -9999;
    #####:  579:        }
        -:  580:        else
        -:  581:        {
    #####:  582:            players[i] = scoreFor (i, state);
        -:  583:        }
    #####:  584:    }
        -:  585:    
        -:  586:    //find highest score
    #####:  587:    j = 0;
    #####:  588:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  589:    {
    #####:  590:        if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  591:        {
    #####:  592:            j = i;
    #####:  593:        }
    #####:  594:    }
    #####:  595:    highScore = players[j];
        -:  596:    
        -:  597:    //add 1 to players who had less turns
    #####:  598:    currentPlayer = whoseTurn(state);
    #####:  599:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  600:    {
    #####:  601:        if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  602:        {
    #####:  603:            players[i]++;
    #####:  604:        }
    #####:  605:    }
        -:  606:    
        -:  607:    //find new highest score
    #####:  608:    j = 0;
    #####:  609:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  610:    {
    #####:  611:        if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  612:        {
    #####:  613:            j = i;
    #####:  614:        }
    #####:  615:    }
    #####:  616:    highScore = players[j];
        -:  617:    
        -:  618:    //set winners in array to 1 and rest to 0
    #####:  619:    for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  620:    {
    #####:  621:        if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  622:        {
    #####:  623:            players[i] = 1;
    #####:  624:        }
        -:  625:        else
        -:  626:        {
    #####:  627:            players[i] = 0;
        -:  628:        }
    #####:  629:    }
        -:  630:    
    #####:  631:    return 0;
        -:  632:}
        -:  633:
function drawCard called 113 returned 100% blocks executed 41%
        -:  634:int drawCard(int player, struct gameState *state)
        -:  635:{	int count;
        -:  636:    int deckCounter;
      113:  637:    if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 0%
branch  1 taken 100%
        -:  638:        
        -:  639:        //Step 1 Shuffle the discard pile back into a deck
        -:  640:        int i;
        -:  641:        //Move discard to deck
    #####:  642:        for (i = 0; i < state->discardCount[player];i++){
branch  0 never executed
branch  1 never executed
    #####:  643:            state->deck[player][i] = state->discard[player][i];
    #####:  644:            state->discard[player][i] = -1;
    #####:  645:        }
        -:  646:        
    #####:  647:        state->deckCount[player] = state->discardCount[player];
    #####:  648:        state->discardCount[player] = 0;//Reset discard
        -:  649:        
        -:  650:        //Shufffle the deck
    #####:  651:        shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  652:        
        -:  653:        if (DEBUG){//Debug statements
        -:  654:            printf("Deck count now: %d\n", state->deckCount[player]);
        -:  655:        }
        -:  656:        
    #####:  657:        state->discardCount[player] = 0;
        -:  658:        
        -:  659:        //Step 2 Draw Card
    #####:  660:        count = state->handCount[player];//Get current player's hand count
        -:  661:        
        -:  662:        if (DEBUG){//Debug statements
        -:  663:            printf("Current hand count: %d\n", count);
        -:  664:        }
        -:  665:        
    #####:  666:        deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  667:        
    #####:  668:        if (deckCounter == 0)
branch  0 never executed
branch  1 never executed
    #####:  669:            return -1;
        -:  670:        
    #####:  671:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  672:        state->deckCount[player]--;
    #####:  673:        state->handCount[player]++;//Increment hand count
    #####:  674:    }
        -:  675:    
        -:  676:    else{
      113:  677:        int count = state->handCount[player];//Get current hand count for player
        -:  678:        int deckCounter;
        -:  679:        if (DEBUG){//Debug statements
        -:  680:            printf("Current hand count: %d\n", count);
        -:  681:        }
        -:  682:        
      113:  683:        deckCounter = state->deckCount[player];//Create holder for the deck count
      113:  684:        state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
      113:  685:        state->deckCount[player]--;
      113:  686:        state->handCount[player]++;//Increment hand count
        -:  687:    }
        -:  688:    
      113:  689:    return 0;
      113:  690:}
        -:  691:
function getCost called 0 returned 0% blocks executed 0%
        -:  692:int getCost(int cardNumber)
        -:  693:{
    #####:  694:    switch( cardNumber )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  695:    {
        -:  696:        case curse:
    #####:  697:            return 0;
        -:  698:        case estate:
    #####:  699:            return 2;
        -:  700:        case duchy:
    #####:  701:            return 5;
        -:  702:        case province:
    #####:  703:            return 8;
        -:  704:        case copper:
    #####:  705:            return 0;
        -:  706:        case silver:
    #####:  707:            return 3;
        -:  708:        case gold:
    #####:  709:            return 6;
        -:  710:        case adventurer:
    #####:  711:            return 6;
        -:  712:        case council_room:
    #####:  713:            return 5;
        -:  714:        case feast:
    #####:  715:            return 4;
        -:  716:        case gardens:
    #####:  717:            return 4;
        -:  718:        case mine:
    #####:  719:            return 5;
        -:  720:        case remodel:
    #####:  721:            return 4;
        -:  722:        case smithy:
    #####:  723:            return 4;
        -:  724:        case village:
    #####:  725:            return 3;
        -:  726:        case baron:
    #####:  727:            return 4;
        -:  728:        case great_hall:
    #####:  729:            return 3;
        -:  730:        case minion:
    #####:  731:            return 5;
        -:  732:        case steward:
    #####:  733:            return 3;
        -:  734:        case tribute:
    #####:  735:            return 5;
        -:  736:        case ambassador:
    #####:  737:            return 3;
        -:  738:        case cutpurse:
    #####:  739:            return 4;
        -:  740:        case embargo:
    #####:  741:            return 2;
        -:  742:        case outpost:
    #####:  743:            return 5;
        -:  744:        case salvager:
    #####:  745:            return 4;
        -:  746:        case sea_hag:
    #####:  747:            return 4;
        -:  748:        case treasure_map:
    #####:  749:            return 4;
        -:  750:    }
        -:  751:    
    #####:  752:    return -1;
    #####:  753:}
        -:  754:
function cardEffect called 3 returned 100% blocks executed 4%
        -:  755:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  756:{
        -:  757:    int i;
        -:  758:    int j;
        -:  759:    int k;
        -:  760:    int x;
        -:  761:    int index;
        3:  762:    int currentPlayer = whoseTurn(state);
        3:  763:    int nextPlayer = currentPlayer + 1;
        -:  764:    
        3:  765:    int tributeRevealedCards[2] = {-1, -1};
        -:  766:    int temphand[MAX_HAND];// moved above the if statement
        3:  767:    int drawntreasure=0;
        -:  768:    int cardDrawn;
        3:  769:    int z = 0;// this is the counter for the temp hand
        3:  770:    if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 0%
branch  1 taken 100%
    #####:  771:        nextPlayer = 0;
    #####:  772:    }
        -:  773:    
        3:  774:    if (card == adventurer) {
branch  0 taken 33%
branch  1 taken 67%
        -:  775:        //refactored code
        1:  776:        runAdventurer (state, currentPlayer);
        1:  777:        return 0;
        -:  778:    }
        -:  779:    
        2:  780:    else if (card == mine) {
branch  0 taken 0%
branch  1 taken 100%
        -:  781:        //refactored code
    #####:  782:        return runMine (state, currentPlayer, choice1, choice2, handPos);
        -:  783:        return 0;
        -:  784:    }
        -:  785:    
        2:  786:    else if (card == smithy) {
branch  0 taken 50%
branch  1 taken 50%
        -:  787:        //refactored code
        1:  788:        runSmithy(currentPlayer, state);
        -:  789:        
        -:  790:        //discard card from hand
        1:  791:        discardCard(handPos, currentPlayer, state, 0);
        1:  792:        return 0;
        -:  793:    }
        -:  794:    
        1:  795:    else if (card == village) {
branch  0 taken 100%
branch  1 taken 0%
        -:  796:        //refactored code
        1:  797:        runVillage (state, currentPlayer);
        -:  798:        
        -:  799:        //discard played card from hand
        1:  800:        discardCard(handPos, currentPlayer, state, 0);
        1:  801:        return 0;
        -:  802:    }
        -:  803:    
    #####:  804:    else if (card == cutpurse) {
branch  0 never executed
branch  1 never executed
        -:  805:        //refactored code
    #####:  806:        runCutPurse (state, currentPlayer);
        -:  807:        
        -:  808:        //discard played card from hand
    #####:  809:        discardCard(handPos, currentPlayer, state, 0);
        -:  810:        
    #####:  811:        return 0;
        -:  812:    }
        -:  813:    
        -:  814:    else {
        -:  815:        
        -:  816:        //uses switch to select card and perform actions
    #####:  817:        switch( card )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
        -:  818:        {
        -:  819:                // case adventurer:
        -:  820:                // //refactored code
        -:  821:                // runAdventurer (state, currentPlayer);
        -:  822:                // return 0;
        -:  823:                
        -:  824:            case council_room:
        -:  825:                //+4 Cards
    #####:  826:                for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  827:                {
    #####:  828:                    drawCard(currentPlayer, state);
    #####:  829:                }
        -:  830:                
        -:  831:                //+1 Buy
    #####:  832:                state->numBuys++;
        -:  833:                
        -:  834:                //Each other player draws a card
    #####:  835:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  836:                {
    #####:  837:                    if ( i != currentPlayer )
branch  0 never executed
branch  1 never executed
        -:  838:                    {
    #####:  839:                        drawCard(i, state);
    #####:  840:                    }
    #####:  841:                }
        -:  842:                
        -:  843:                //put played card in played card pile
    #####:  844:                discardCard(handPos, currentPlayer, state, 0);
        -:  845:                
    #####:  846:                return 0;
        -:  847:                
        -:  848:            case feast:
        -:  849:                //gain card with cost up to 5
        -:  850:                //Backup hand
    #####:  851:                for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  852:                    temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  853:                    state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  854:                }
        -:  855:                //Backup hand
        -:  856:                
        -:  857:                //Update Coins for Buy
    #####:  858:                updateCoins(currentPlayer, state, 5);
    #####:  859:                x = 1;//Condition to loop on
    #####:  860:                while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  861:                    if (supplyCount(choice1, state) <= 0){
branch  0 never executed
branch  1 never executed
        -:  862:                        if (DEBUG)
        -:  863:                            printf("None of that card left, sorry!\n");
        -:  864:                        
        -:  865:                        if (DEBUG){
        -:  866:                            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  867:                        }
    #####:  868:                    }
    #####:  869:                    else if (state->coins < getCost(choice1)){
branch  0 never executed
branch  1 never executed
    #####:  870:                        printf("That card is too expensive!\n");
        -:  871:                        
        -:  872:                        if (DEBUG){
        -:  873:                            printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  874:                        }
    #####:  875:                    }
        -:  876:                    else{
        -:  877:                        
        -:  878:                        if (DEBUG){
        -:  879:                            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  880:                        }
        -:  881:                        
    #####:  882:                        gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  883:                        x = 0;//No more buying cards
        -:  884:                        
        -:  885:                        if (DEBUG){
        -:  886:                            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  887:                        }
        -:  888:                    }
        -:  889:                }
        -:  890:                
        -:  891:                //Reset Hand
    #####:  892:                for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  893:                    state->hand[currentPlayer][i] = temphand[i];
    #####:  894:                    temphand[i] = -1;
    #####:  895:                }
        -:  896:                //Reset Hand
        -:  897:                
    #####:  898:                return 0;
        -:  899:                
        -:  900:            case gardens:
    #####:  901:                return -1;
        -:  902:                
        -:  903:                // case mine:
        -:  904:                //      //refactored code
        -:  905:                // return runMine (state, currentPlayer, choice1, choice2, handPos);
        -:  906:                
        -:  907:                // return 0;
        -:  908:                
        -:  909:            case remodel:
    #####:  910:                j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  911:                
    #####:  912:                if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
branch  0 never executed
branch  1 never executed
        -:  913:                {
    #####:  914:                    return -1;
        -:  915:                }
        -:  916:                
    #####:  917:                gainCard(choice2, state, 0, currentPlayer);
        -:  918:                
        -:  919:                //discard card from hand
    #####:  920:                discardCard(handPos, currentPlayer, state, 0);
        -:  921:                
        -:  922:                //discard trashed card
    #####:  923:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  924:                {
    #####:  925:                    if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  926:                    {
    #####:  927:                        discardCard(i, currentPlayer, state, 0);
    #####:  928:                        break;
        -:  929:                    }
    #####:  930:                }
        -:  931:                
        -:  932:                
    #####:  933:                return 0;
        -:  934:                
        -:  935:                // case smithy:
        -:  936:                // //refactored code
        -:  937:                // runSmithy(currentPlayer, state);
        -:  938:                
        -:  939:                //  //discard card from hand
        -:  940:                // discardCard(handPos, currentPlayer, state, 0);
        -:  941:                // return 0;
        -:  942:                
        -:  943:                // case village:
        -:  944:                // //refactored code
        -:  945:                // runVillage (state, currentPlayer);
        -:  946:                
        -:  947:                //  //discard played card from hand
        -:  948:                // discardCard(handPos, currentPlayer, state, 0);
        -:  949:                // return 0;
        -:  950:                
        -:  951:            case baron:
    #####:  952:                state->numBuys++;//Increase buys by 1!
    #####:  953:                if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  954:                    int p = 0;//Iterator for hand!
    #####:  955:                    int card_not_discarded = 1;//Flag for discard set!
    #####:  956:                    while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  957:                        if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  958:                            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  959:                            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  960:                            state->discardCount[currentPlayer]++;
    #####:  961:                            for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  962:                                state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  963:                            }
    #####:  964:                            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  965:                            state->handCount[currentPlayer]--;
    #####:  966:                            card_not_discarded = 0;//Exit the loop
    #####:  967:                        }
    #####:  968:                        else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  969:                            if(DEBUG) {
        -:  970:                                printf("No estate cards in your hand, invalid choice\n");
        -:  971:                                printf("Must gain an estate if there are any\n");
        -:  972:                            }
    #####:  973:                            if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  974:                                gainCard(estate, state, 0, currentPlayer);
    #####:  975:                                state->supplyCount[estate]--;//Decrement estates
    #####:  976:                                if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  977:                                    isGameOver(state);
    #####:  978:                                }
    #####:  979:                            }
    #####:  980:                            card_not_discarded = 0;//Exit the loop
    #####:  981:                        }
        -:  982:                        
        -:  983:                        else{
    #####:  984:                            p++;//Next card
        -:  985:                        }
        -:  986:                    }
    #####:  987:                }
        -:  988:                
        -:  989:                else{
    #####:  990:                    if (supplyCount(estate, state) > 0){
branch  0 never executed
branch  1 never executed
    #####:  991:                        gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  992:                        state->supplyCount[estate]--;//Decrement Estates
    #####:  993:                        if (supplyCount(estate, state) == 0){
branch  0 never executed
branch  1 never executed
    #####:  994:                            isGameOver(state);
    #####:  995:                        }
    #####:  996:                    }
        -:  997:                }
        -:  998:                
        -:  999:                
    #####: 1000:                return 0;
        -: 1001:                
        -: 1002:            case great_hall:
        -: 1003:                //+1 Card
    #####: 1004:                drawCard(currentPlayer, state);
        -: 1005:                
        -: 1006:                //+1 Actions
    #####: 1007:                state->numActions++;
        -: 1008:                //discard card from hand
    #####: 1009:                discardCard(handPos, currentPlayer, state, 0);
    #####: 1010:                return 0;
        -: 1011:                
        -: 1012:            case minion:
        -: 1013:                //+1 action
    #####: 1014:                state->numActions++;
        -: 1015:                
        -: 1016:                //discard card from hand
    #####: 1017:                discardCard(handPos, currentPlayer, state, 0);
        -: 1018:                
    #####: 1019:                if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -: 1020:                {
    #####: 1021:                    state->coins = state->coins + 2;
    #####: 1022:                }
        -: 1023:                
    #####: 1024:                else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -: 1025:                {
        -: 1026:                    //discard hand
    #####: 1027:                    while(numHandCards(state) > 0)
branch  0 never executed
branch  1 never executed
        -: 1028:                    {
    #####: 1029:                        discardCard(handPos, currentPlayer, state, 0);
        -: 1030:                    }
        -: 1031:                    
        -: 1032:                    //draw 4
    #####: 1033:                    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1034:                    {
    #####: 1035:                        drawCard(currentPlayer, state);
    #####: 1036:                    }
        -: 1037:                    
        -: 1038:                    //other players discard hand and redraw if hand size > 4
    #####: 1039:                    for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1040:                    {
    #####: 1041:                        if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1042:                        {
    #####: 1043:                            if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -: 1044:                            {
        -: 1045:                                //discard hand
    #####: 1046:                                while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -: 1047:                                {
    #####: 1048:                                    discardCard(handPos, i, state, 0);
        -: 1049:                                }
        -: 1050:                                
        -: 1051:                                //draw 4
    #####: 1052:                                for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -: 1053:                                {
    #####: 1054:                                    drawCard(i, state);
    #####: 1055:                                }
    #####: 1056:                            }
    #####: 1057:                        }
    #####: 1058:                    }
        -: 1059:                    
    #####: 1060:                }
    #####: 1061:                return 0;
        -: 1062:                
        -: 1063:            case steward:
    #####: 1064:                if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -: 1065:                {
        -: 1066:                    //+2 cards
    #####: 1067:                    drawCard(currentPlayer, state);
    #####: 1068:                    drawCard(currentPlayer, state);
    #####: 1069:                }
    #####: 1070:                else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -: 1071:                {
        -: 1072:                    //+2 coins
    #####: 1073:                    state->coins = state->coins + 2;
    #####: 1074:                }
        -: 1075:                else
        -: 1076:                {
        -: 1077:                    //trash 2 cards in hand
    #####: 1078:                    discardCard(choice2, currentPlayer, state, 1);
    #####: 1079:                    discardCard(choice3, currentPlayer, state, 1);
        -: 1080:                }
        -: 1081:                
        -: 1082:                //discard card from hand
    #####: 1083:                discardCard(handPos, currentPlayer, state, 0);
    #####: 1084:                return 0;
        -: 1085:                
        -: 1086:            case tribute:
    #####: 1087:                if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1088:                    if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1089:                        tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1090:                        state->deckCount[nextPlayer]--;
    #####: 1091:                    }
    #####: 1092:                    else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1093:                        tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1094:                        state->discardCount[nextPlayer]--;
    #####: 1095:                    }
        -: 1096:                    else{
        -: 1097:                        //No Card to Reveal
        -: 1098:                        if (DEBUG){
        -: 1099:                            printf("No cards to reveal\n");
        -: 1100:                        }
        -: 1101:                    }
    #####: 1102:                }
        -: 1103:                
        -: 1104:                else{
    #####: 1105:                    if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1106:                        for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1107:                            state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1108:                            state->deckCount[nextPlayer]++;
    #####: 1109:                            state->discard[nextPlayer][i] = -1;
    #####: 1110:                            state->discardCount[nextPlayer]--;
    #####: 1111:                        }
        -: 1112:                        
    #####: 1113:                        shuffle(nextPlayer,state);//Shuffle the deck
    #####: 1114:                    } 
    #####: 1115:                    tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1116:                    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1117:                    state->deckCount[nextPlayer]--;
    #####: 1118:                    tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1119:                    state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1120:                    state->deckCount[nextPlayer]--;
        -: 1121:                }    
        -: 1122:                
    #####: 1123:                if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1124:                    state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1125:                    state->playedCardCount++;
    #####: 1126:                    tributeRevealedCards[1] = -1;
    #####: 1127:                }
        -: 1128:                
    #####: 1129:                for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1130:                    if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1131:                        state->coins += 2;
    #####: 1132:                    }
        -: 1133:                    
    #####: 1134:                    else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1135:                        drawCard(currentPlayer, state);
    #####: 1136:                        drawCard(currentPlayer, state);
    #####: 1137:                    }
        -: 1138:                    else{//Action Card
    #####: 1139:                        state->numActions = state->numActions + 2;
        -: 1140:                    }
    #####: 1141:                }
        -: 1142:                
    #####: 1143:                return 0;
        -: 1144:                
        -: 1145:            case ambassador:
    #####: 1146:                j = 0;		//used to check if player has enough cards to discard
        -: 1147:                
    #####: 1148:                if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1149:                {
    #####: 1150:                    return -1;				
        -: 1151:                }
        -: 1152:                
    #####: 1153:                if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1154:                {
    #####: 1155:                    return -1;
        -: 1156:                }
        -: 1157:                
    #####: 1158:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1159:                {
    #####: 1160:                    if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1161:                    {
    #####: 1162:                        j++;
    #####: 1163:                    }
    #####: 1164:                }
    #####: 1165:                if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1166:                {
    #####: 1167:                    return -1;				
        -: 1168:                }
        -: 1169:                
        -: 1170:                if (DEBUG) 
        -: 1171:                    printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1172:                
        -: 1173:                //increase supply count for choosen card by amount being discarded
    #####: 1174:                state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1175:                
        -: 1176:                //each other player gains a copy of revealed card
    #####: 1177:                for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1178:                {
    #####: 1179:                    if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1180:                    {
    #####: 1181:                        gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####: 1182:                    }
    #####: 1183:                }
        -: 1184:                
        -: 1185:                //discard played card from hand
    #####: 1186:                discardCard(handPos, currentPlayer, state, 0);			
        -: 1187:                
        -: 1188:                //trash copies of cards returned to supply
    #####: 1189:                for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1190:                {
    #####: 1191:                    for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1192:                    {
    #####: 1193:                        if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1194:                        {
    #####: 1195:                            discardCard(i, currentPlayer, state, 1);
    #####: 1196:                            break;
        -: 1197:                        }
    #####: 1198:                    }
    #####: 1199:                }			
        -: 1200:                
    #####: 1201:                return 0;
        -: 1202:                
        -: 1203:                // case cutpurse:
        -: 1204:                // //refactored code
        -: 1205:                // runCutPurse (state, currentPlayer);		
        -: 1206:                
        -: 1207:                // //discard played card from hand
        -: 1208:                // discardCard(handPos, currentPlayer, state, 0);			
        -: 1209:                
        -: 1210:                // return 0;
        -: 1211:                
        -: 1212:                
        -: 1213:            case embargo: 
        -: 1214:                //+2 Coins
    #####: 1215:                state->coins = state->coins + 2;
        -: 1216:                
        -: 1217:                //see if selected pile is in play
    #####: 1218:                if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1219:                {
    #####: 1220:                    return -1;
        -: 1221:                }
        -: 1222:                
        -: 1223:                //add embargo token to selected supply pile
    #####: 1224:                state->embargoTokens[choice1]++;
        -: 1225:                
        -: 1226:                //trash card
    #####: 1227:                discardCard(handPos, currentPlayer, state, 1);		
    #####: 1228:                return 0;
        -: 1229:                
        -: 1230:            case outpost:
        -: 1231:                //set outpost flag
    #####: 1232:                state->outpostPlayed++;
        -: 1233:                
        -: 1234:                //discard card
    #####: 1235:                discardCard(handPos, currentPlayer, state, 0);
    #####: 1236:                return 0;
        -: 1237:                
        -: 1238:            case salvager:
        -: 1239:                //+1 buy
    #####: 1240:                state->numBuys++;
        -: 1241:                
    #####: 1242:                if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1243:                {
        -: 1244:                    //gain coins equal to trashed card
    #####: 1245:                    state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1246:                    //trash card
    #####: 1247:                    discardCard(choice1, currentPlayer, state, 1);	
    #####: 1248:                }
        -: 1249:                
        -: 1250:                //discard card
    #####: 1251:                discardCard(handPos, currentPlayer, state, 0);
    #####: 1252:                return 0;
        -: 1253:                
        -: 1254:            case sea_hag:
    #####: 1255:                for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1256:                    if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1257:                        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1258:                        state->discardCount[i]++;
    #####: 1259:                        state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1260:                    }
    #####: 1261:                }
    #####: 1262:                return 0;
        -: 1263:                
        -: 1264:            case treasure_map:
        -: 1265:                //search hand for another treasure_map
    #####: 1266:                index = -1;
    #####: 1267:                for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1268:                {
    #####: 1269:                    if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1270:                    {
    #####: 1271:                        index = i;
    #####: 1272:                        break;
        -: 1273:                    }
    #####: 1274:                }
    #####: 1275:                if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1276:                {
        -: 1277:                    //trash both treasure cards
    #####: 1278:                    discardCard(handPos, currentPlayer, state, 1);
    #####: 1279:                    discardCard(index, currentPlayer, state, 1);
        -: 1280:                    
        -: 1281:                    //gain 4 Gold cards
    #####: 1282:                    for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1283:                    {
    #####: 1284:                        gainCard(gold, state, 1, currentPlayer);
    #####: 1285:                    }
        -: 1286:                    
        -: 1287:                    //return success
    #####: 1288:                    return 1;
        -: 1289:                }
        -: 1290:                
        -: 1291:                //no second treasure_map found in hand
    #####: 1292:                return -1;
        -: 1293:        }
        -: 1294:        
    #####: 1295:        return -1;
        -: 1296:    }
        3: 1297:}
        -: 1298:
function discardCard called 2 returned 100% blocks executed 80%
        -: 1299:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1300:{
        -: 1301:    
        -: 1302:    //if card is not trashed, added to Played pile 
        2: 1303:    if (trashFlag < 1)
branch  0 taken 100%
branch  1 taken 0%
        -: 1304:    {
        -: 1305:        //add card to played pile
        2: 1306:        state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
        2: 1307:        state->playedCardCount++;
        2: 1308:    }
        -: 1309:    
        -: 1310:    //set played card to -1
        2: 1311:    state->hand[currentPlayer][handPos] = -1;
        -: 1312:    
        -: 1313:    //remove card from player's hand
        2: 1314:    if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0%
branch  1 taken 100%
        -: 1315:    {
        -: 1316:        //reduce number of cards in hand
    #####: 1317:        state->handCount[currentPlayer]--;
    #####: 1318:    }
        2: 1319:    else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0%
branch  1 taken 100%
        -: 1320:    {
        -: 1321:        //reduce number of cards in hand
    #####: 1322:        state->handCount[currentPlayer]--;
    #####: 1323:    }
        -: 1324:    else 	
        -: 1325:    {
        -: 1326:        //replace discarded card with last card in hand
        2: 1327:        state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1328:        //set last card to -1
        2: 1329:        state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1330:        //reduce number of cards in hand
        2: 1331:        state->handCount[currentPlayer]--;
        -: 1332:    }
        -: 1333:    
        2: 1334:    return 0;
        -: 1335:}
        -: 1336:
function gainCard called 14 returned 100% blocks executed 72%
        -: 1337:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1338:{
        -: 1339:    //Note: supplyPos is enum of choosen card
        -: 1340:    
        -: 1341:    //check if supply pile is empty (0) or card is not used in game (-1)
       14: 1342:    if ( supplyCount(supplyPos, state) < 1 )
branch  0 taken 0%
branch  1 taken 100%
        -: 1343:    {
    #####: 1344:        return -1;
        -: 1345:    }
        -: 1346:    
        -: 1347:    //added card for [whoseTurn] current player:
        -: 1348:    // toFlag = 0 : add to discard
        -: 1349:    // toFlag = 1 : add to deck
        -: 1350:    // toFlag = 2 : add to hand
        -: 1351:    
       14: 1352:    if (toFlag == 1)
branch  0 taken 0%
branch  1 taken 100%
        -: 1353:    {
    #####: 1354:        state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1355:        state->deckCount[player]++;
    #####: 1356:    }
       14: 1357:    else if (toFlag == 2)
branch  0 taken 100%
branch  1 taken 0%
        -: 1358:    {
       14: 1359:        state->hand[ player ][ state->handCount[player] ] = supplyPos;
       14: 1360:        state->handCount[player]++;
       14: 1361:    }
        -: 1362:    else
        -: 1363:    {
    #####: 1364:        state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1365:        state->discardCount[player]++;
        -: 1366:    }
        -: 1367:    
        -: 1368:    //decrease number in supply pile
       14: 1369:    state->supplyCount[supplyPos]--;
        -: 1370:    
       14: 1371:    return 0;
       14: 1372:}
        -: 1373:
function updateCoins called 24 returned 100% blocks executed 85%
        -: 1374:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1375:{
        -: 1376:    int i;
        -: 1377:    
        -: 1378:    //reset coin count
       24: 1379:    state->coins = 0;
        -: 1380:    
        -: 1381:    //add coins for each Treasure card in player's hand
      306: 1382:    for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 84%
branch  1 taken 16%
        -: 1383:    {
      129: 1384:        if (state->hand[player][i] == copper)
branch  0 taken 61%
branch  1 taken 39%
        -: 1385:        {
       79: 1386:            state->coins += 1;
       79: 1387:        }
       50: 1388:        else if (state->hand[player][i] == silver)
branch  0 taken 0%
branch  1 taken 100%
        -: 1389:        {
    #####: 1390:            state->coins += 2;
    #####: 1391:        }
       50: 1392:        else if (state->hand[player][i] == gold)
branch  0 taken 0%
branch  1 taken 100%
        -: 1393:        {
    #####: 1394:            state->coins += 3;
    #####: 1395:        }	
      129: 1396:    }	
        -: 1397:    
        -: 1398:    //add bonus
       24: 1399:    state->coins += bonus;
        -: 1400:    
       24: 1401:    return 0;
        -: 1402:}
        -: 1403:
        -: 1404:
        -: 1405://end of dominion.c
        -: 1406:
